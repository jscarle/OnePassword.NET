{
  "docs/quick-start.html": {
    "href": "docs/quick-start.html",
    "title": "Quick start | OnePassword.NET",
    "keywords": "Quick start Creating an instance of the manager var onePassword = new OnePasswordManager(); Adding your account and signing in for the first time var domain = \"my.1password.com\"; var email = \"your@email.com\"; var secretKey = \"A3-YOUR-SECRET-KEY\"; var password = \"yourpassword\"; onePassword.AddAccount(domain, email, secretKey, password); onePassword.SignIn(password); Signing in for subsequent connections onePassword.UseAccount(domain); onePassword.SignIn(password); Using Service Accounts To signin using a Service Account, a token must be provided as part of the options. var onePassword = new OnePasswordManager(options => { options.ServiceAccountToken = \"yourtoken\"; }); Subsequently, the following commands are not used or supported when using service accounts. GetAccounts, GetAccount, AddAccount, UseAccount, ForgetAccount SignIn, SignOut For more information, see the documentation on 1Password Service Accounts. var onePassword = new OnePasswordManager(serviceAccountToken: token); Getting all vaults var vaults = onePassword.GetVaults(); Selecting a specific vault var vault = vaults.First(x => x.Name == \"Private\"); Creating an item using a template var serverTemplate = onePassword.GetTemplate(Category.Server); serverTemplate.Title = \"Your Item's Title\"; serverTemplate.Fields.First(x => x.Label == \"username\").Value = \"secretuser\"; serverTemplate.Fields.First(x => x.Label == \"password\").Value = \"secretpass\"; var serverItem = onePassword.CreateItem(serverTemplate, vault); Note: If you want to reuse the same template for several items, make sure you clone the instance to avoid reference issues. var server1 = serverTemplate.Clone(); var server2 = serverTemplate.Clone(); Getting all items in a vault var items = onePassword.GetItems(vault); Selecting a specific item var item = items.First(x => x.Title == \"Your Item's Title\"); Editing a specific item item.Fields.First(x => x.Label == \"password\").Value = \"newpass\"; onePassword.EditItem(item, vault); Archiving an item onePassword.ArchiveItem(item, vault); Deleting an item onePassword.DeleteItem(item, vault); Signing out onePassword.SignOut();"
  },
  "docs/running-tests.html": {
    "href": "docs/running-tests.html",
    "title": "Running tests | OnePassword.NET",
    "keywords": "Running tests Due to the fact that this library acts as a wrapper for the CLI and in order for tests to have any significant value, the majority of tests are integration tests which must run against an active 1Password account (preferably a Business account). Effects on the active account The integration tests will sign in to the specified account, then create and update a test group, a test user (optional), and a test vault. Items will then be created and update in the test vault. Finally, the test vault, user, and group will be deleted. Note: If the integration tests fail, test data may remain in the specified account. Configuration The integration tests are configured using the environment variables which are prefixed with OPT_ (OnePassword Tests). Environment variables which are integers must contain only numbers and those which are booleans must contain true or false as a string. Environment Variable Description Type Default Value OPT_COMMAND_TIMEOUT The timeout (in minutes) for each CLI command. int 2 OPT_RATE_LIMIT The rate (in milliseconds) at which commands are executed. int 250 OPT_RUN_LIVE_TESTS Activates or deactivates integration tests. bool false OPT_CREATE_TEST_USER Activates or deactivates the creation of the test user and its related tests. bool false OPT_ACCOUNT_ADDRESS The account address. Should be the host name only. string OPT_ACCOUNT_EMAIL The email to use when authenticating. string OPT_ACCOUNT_NAME The account name. Used to test account related commands. string OPT_ACCOUNT_PASSWORD The password to use when authenticating. string OPT_ACCOUNT_SECRET_KEY The secret key to use when authenticating. string OPT_TEST_USER_EMAIL The test user's email address. string OPT_TEST_USER_CONFIRM_TIMEOUT The time (in minutes) to wait for manual confirmation of the test user. int OPT_COMMAND_TIMEOUT"
  },
  "index.html": {
    "href": "index.html",
    "title": "OnePassword.NET - 1Password CLI Wrapper | OnePassword.NET",
    "keywords": "OnePassword.NET - 1Password CLI Wrapper This library serves as a .NET wrapper for the 1Password command-line tool op.exe ( Download | Documentation ). References This library targets .NET 6.0, .NET 7.0, and .NET 8.0. Dependencies This library has no dependencies."
  },
  "reference/OnePassword.Accounts.Account.html": {
    "href": "reference/OnePassword.Accounts.Account.html",
    "title": "Class Account | OnePassword.NET",
    "keywords": "Class Account Namespace OnePassword.Accounts Assembly OnePassword.NET.dll Represents a 1Password account. public sealed class Account : IAccount, IEquatable<IAccount>, IComparable<IAccount>, IComparable Inheritance object Account Implements IAccount IEquatable<IAccount> IComparable<IAccount> IComparable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Email The email address for the user associated with the account. [JsonInclude] [JsonPropertyName(\"email\")] public string Email { get; } Property Value string Id The account ID. [JsonInclude] [JsonPropertyName(\"account_uuid\")] public string Id { get; } Property Value string Shorthand The account shorthand. [JsonInclude] [JsonPropertyName(\"shorthand\")] public string Shorthand { get; } Property Value string Url The account URL. [JsonInclude] [JsonPropertyName(\"url\")] public string Url { get; } Property Value string UserId The user ID for the user associated with the account. [JsonInclude] [JsonPropertyName(\"user_uuid\")] public string UserId { get; } Property Value string Methods CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object? obj) Parameters obj object? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. CompareTo(IAccount?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IAccount? other) Parameters other IAccount? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Deconstruct(out string, out string) Deconstructs the account into its ID and name. public void Deconstruct(out string id, out string name) Parameters id string The account ID. name string The account name. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(IAccount?) Indicates whether the current object is equal to another object of the same type. public bool Equals(IAccount? other) Parameters other IAccount? An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(Account, IAccount) Equality operator. public static bool operator ==(Account a, IAccount b) Parameters a Account The first account to compare. b IAccount The second account to compare. Returns bool True if the accounts are equal, false otherwise. operator >(Account, IAccount) Greater than operator. public static bool operator >(Account a, IAccount b) Parameters a Account The first account to compare. b IAccount The second account to compare. Returns bool True if the first account is greater than the second one, false otherwise. operator >=(Account, IAccount) Greater than or equal to operator. public static bool operator >=(Account a, IAccount b) Parameters a Account The first account to compare. b IAccount The second account to compare. Returns bool True if the first account is greater than or equal to the second one, false otherwise. operator !=(Account, IAccount) Inequality operator. public static bool operator !=(Account a, IAccount b) Parameters a Account The first account to compare. b IAccount The second account to compare. Returns bool True if the accounts are not equal, false otherwise. operator <(Account, IAccount) Less than operator. public static bool operator <(Account a, IAccount b) Parameters a Account The first account to compare. b IAccount The second account to compare. Returns bool True if the first account is less than the second one, false otherwise. operator <=(Account, IAccount) Less than or equal to operator. public static bool operator <=(Account a, IAccount b) Parameters a Account The first account to compare. b IAccount The second account to compare. Returns bool True if the first account is less than or equal to the second one, false otherwise."
  },
  "reference/OnePassword.Accounts.AccountDetails.html": {
    "href": "reference/OnePassword.Accounts.AccountDetails.html",
    "title": "Class AccountDetails | OnePassword.NET",
    "keywords": "Class AccountDetails Namespace OnePassword.Accounts Assembly OnePassword.NET.dll Represents a 1Password account with details. public sealed class AccountDetails : IAccount, IEquatable<IAccount>, IComparable<IAccount>, IComparable Inheritance object AccountDetails Implements IAccount IEquatable<IAccount> IComparable<IAccount> IComparable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Created The date and time when the account was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTimeOffset Created { get; } Property Value DateTimeOffset Domain The account domain. [JsonInclude] [JsonPropertyName(\"domain\")] public string Domain { get; } Property Value string Id The account ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string Name The account name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string State The state of the account. [JsonInclude] [JsonPropertyName(\"state\")] public State State { get; } Property Value State Type The account type. [JsonInclude] [JsonPropertyName(\"type\")] public AccountType Type { get; } Property Value AccountType Methods CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object? obj) Parameters obj object? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. CompareTo(IAccount?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IAccount? other) Parameters other IAccount? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Deconstruct(out string, out string) Deconstructs the account into its ID and name. public void Deconstruct(out string id, out string name) Parameters id string The account ID. name string The account name. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(IAccount?) Indicates whether the current object is equal to another object of the same type. public bool Equals(IAccount? other) Parameters other IAccount? An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(AccountDetails, IAccount) Equality operator. public static bool operator ==(AccountDetails a, IAccount b) Parameters a AccountDetails The OnePassword.Accounts.AccountDetails object. b IAccount The OnePassword.Accounts.IAccount object to compare. Returns bool True if the a is equal to b; otherwise, false. operator >(AccountDetails, IAccount) Greater than operator. public static bool operator >(AccountDetails a, IAccount b) Parameters a AccountDetails The OnePassword.Accounts.AccountDetails object. b IAccount The OnePassword.Accounts.IAccount object to compare. Returns bool True if the a is greater than b; otherwise, false. operator >=(AccountDetails, IAccount) Greater than or equal to operator. public static bool operator >=(AccountDetails a, IAccount b) Parameters a AccountDetails The OnePassword.Accounts.AccountDetails object. b IAccount The OnePassword.Accounts.IAccount object to compare. Returns bool True if the a is greater than or equal to b; otherwise, false. operator !=(AccountDetails, IAccount) Inequality operator. public static bool operator !=(AccountDetails a, IAccount b) Parameters a AccountDetails The OnePassword.Accounts.AccountDetails object. b IAccount The OnePassword.Accounts.IAccount object to compare. Returns bool True if the a is not equal to b; otherwise, false. operator <(AccountDetails, IAccount) Less than operator. public static bool operator <(AccountDetails a, IAccount b) Parameters a AccountDetails The OnePassword.Accounts.AccountDetails object. b IAccount The OnePassword.Accounts.IAccount object to compare. Returns bool True if the a is less than b; otherwise, false. operator <=(AccountDetails, IAccount) Less than or equal to operator. public static bool operator <=(AccountDetails a, IAccount b) Parameters a AccountDetails The OnePassword.Accounts.AccountDetails object. b IAccount The OnePassword.Accounts.IAccount object to compare. Returns bool True if the a is less than or equal to b; otherwise, false."
  },
  "reference/OnePassword.Accounts.AccountType.html": {
    "href": "reference/OnePassword.Accounts.AccountType.html",
    "title": "Enum AccountType | OnePassword.NET",
    "keywords": "Enum AccountType Namespace OnePassword.Accounts Assembly OnePassword.NET.dll Represent a type of 1Password account. [JsonConverter(typeof(JsonStringEnumConverterEx<AccountType>))] public enum AccountType Fields Business = 0 1Password Business Account Family = 1 1Password Family Account Personal = 2 1Password Personal Account Teams = 3 1Password Teams Account Unknown = 4 The account type is unknown."
  },
  "reference/OnePassword.Accounts.IAccount.html": {
    "href": "reference/OnePassword.Accounts.IAccount.html",
    "title": "Interface IAccount | OnePassword.NET",
    "keywords": "Interface IAccount Namespace OnePassword.Accounts Assembly OnePassword.NET.dll Defines a 1Password account. public interface IAccount : IEquatable<IAccount>, IComparable<IAccount>, IComparable Implements IEquatable<IAccount> IComparable<IAccount> IComparable Properties Id The account ID. string Id { get; } Property Value string Methods Deconstruct(out string, out string) Deconstructs the account into its ID and name. void Deconstruct(out string id, out string name) Parameters id string The account ID. name string The account name."
  },
  "reference/OnePassword.Accounts.html": {
    "href": "reference/OnePassword.Accounts.html",
    "title": "Namespace OnePassword.Accounts | OnePassword.NET",
    "keywords": "Namespace OnePassword.Accounts Classes Account Represents a 1Password account. AccountDetails Represents a 1Password account with details. Interfaces IAccount Defines a 1Password account. Enums AccountType Represent a type of 1Password account."
  },
  "reference/OnePassword.Common.IResult-1.html": {
    "href": "reference/OnePassword.Common.IResult-1.html",
    "title": "Interface IResult<T> | OnePassword.NET",
    "keywords": "Interface IResult<T> Namespace OnePassword.Common Assembly OnePassword.NET.dll Defines a command result. public interface IResult<T> : IEquatable<IResult<T>>, IComparable<IResult<T>>, IComparable Type Parameters T The result type. Implements IEquatable<IResult<T>> IComparable<IResult<T>> IComparable Properties Id The object ID. string Id { get; } Property Value string Name The object name. string Name { get; } Property Value string Methods Deconstruct(out string, out string) Deconstructs the object into its ID and name. void Deconstruct(out string id, out string name) Parameters id string The object ID. name string The object name."
  },
  "reference/OnePassword.Common.Language.html": {
    "href": "reference/OnePassword.Common.Language.html",
    "title": "Enum Language | OnePassword.NET",
    "keywords": "Enum Language Namespace OnePassword.Common Assembly OnePassword.NET.dll Represents a language. [JsonConverter(typeof(JsonStringEnumConverterEx<Language>))] public enum Language Fields ChineseSimplified = 0 Chinese (Simplified) ChineseTraditional = 1 Chinese (Traditional) Default = 3 The default language. Dutch = 2 Dutch English = 4 English French = 5 French German = 6 German Italian = 7 Italian Japanese = 8 Japanese Korean = 9 Korean Portuguese = 10 Portuguese Russian = 11 Russian Spanish = 12 Spanish Unknown = 13 The language is unknown."
  },
  "reference/OnePassword.Common.Mode.html": {
    "href": "reference/OnePassword.Common.Mode.html",
    "title": "Enum Mode | OnePassword.NET",
    "keywords": "Enum Mode Namespace OnePassword.Common Assembly OnePassword.NET.dll Represents the 1Password operating mode. public enum Mode Fields AppIntegrated = 1 Operate in app-integrated mode. Interactive = 0 Operate in interactive mode. ServiceAccount = 2 Operate in service account mode."
  },
  "reference/OnePassword.Common.ResultBase-1.html": {
    "href": "reference/OnePassword.Common.ResultBase-1.html",
    "title": "Class ResultBase<TInterface> | OnePassword.NET",
    "keywords": "Class ResultBase<TInterface> Namespace OnePassword.Common Assembly OnePassword.NET.dll Common base class that represents a command result. public abstract class ResultBase<TInterface> : IResult<TInterface>, IEquatable<IResult<TInterface>>, IComparable<IResult<TInterface>>, IComparable where TInterface : IResult<TInterface> Type Parameters TInterface The result interface type. Inheritance object ResultBase<TInterface> Implements IResult<TInterface> IEquatable<IResult<TInterface>> IComparable<IResult<TInterface>> IComparable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties Id The object ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string Name The object name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string Methods CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object? obj) Parameters obj object? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. CompareTo(IResult<TInterface>?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IResult<TInterface>? other) Parameters other IResult<TInterface>? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Deconstruct(out string, out string) Deconstructs the object into its ID and name. public void Deconstruct(out string id, out string name) Parameters id string The object ID. name string The object name. Equals(IResult<TInterface>?) Indicates whether the current object is equal to another object of the same type. public bool Equals(IResult<TInterface>? other) Parameters other IResult<TInterface>? An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(ResultBase<TInterface>, IResult<TInterface>) Equality operator. public static bool operator ==(ResultBase<TInterface> a, IResult<TInterface> b) Parameters a ResultBase<TInterface> The OnePassword.Common.ResultBase`1 object. b IResult<TInterface> The OnePassword.Common.IResult`1 object to compare. Returns bool True if the a is equal to b; otherwise, false. operator >(ResultBase<TInterface>, IResult<TInterface>) Greater than operator. public static bool operator >(ResultBase<TInterface> a, IResult<TInterface> b) Parameters a ResultBase<TInterface> The OnePassword.Common.ResultBase`1 object. b IResult<TInterface> The OnePassword.Common.IResult`1 object to compare. Returns bool True if the a is greater than b; otherwise, false. operator >=(ResultBase<TInterface>, IResult<TInterface>) Greater than or equal to operator. public static bool operator >=(ResultBase<TInterface> a, IResult<TInterface> b) Parameters a ResultBase<TInterface> The OnePassword.Common.ResultBase`1 object. b IResult<TInterface> The OnePassword.Common.IResult`1 object to compare. Returns bool True if the a is greater than or equal to b; otherwise, false. operator !=(ResultBase<TInterface>, IResult<TInterface>) Inequality operator. public static bool operator !=(ResultBase<TInterface> a, IResult<TInterface> b) Parameters a ResultBase<TInterface> The OnePassword.Common.ResultBase`1 object. b IResult<TInterface> The OnePassword.Common.IResult`1 object to compare. Returns bool True if the a is not equal to b; otherwise, false. operator <(ResultBase<TInterface>, IResult<TInterface>) Less than operator. public static bool operator <(ResultBase<TInterface> a, IResult<TInterface> b) Parameters a ResultBase<TInterface> The OnePassword.Common.ResultBase`1 object. b IResult<TInterface> The OnePassword.Common.IResult`1 object to compare. Returns bool True if the a is less than b; otherwise, false. operator <=(ResultBase<TInterface>, IResult<TInterface>) Less than or equal to operator. public static bool operator <=(ResultBase<TInterface> a, IResult<TInterface> b) Parameters a ResultBase<TInterface> The OnePassword.Common.ResultBase`1 object. b IResult<TInterface> The OnePassword.Common.IResult`1 object to compare. Returns bool True if the a is less than or equal to b; otherwise, false."
  },
  "reference/OnePassword.Common.State.html": {
    "href": "reference/OnePassword.Common.State.html",
    "title": "Enum State | OnePassword.NET",
    "keywords": "Enum State Namespace OnePassword.Common Assembly OnePassword.NET.dll Represents a state. [JsonConverter(typeof(JsonStringEnumConverterEx<State>))] public enum State Fields Active = 0 Active Inactive = 1 Inactive Suspended = 2 Suspended TransferAccepted = 3 Transfer has been accepted. TransferPending = 4 Transfer is pending. TransferStarted = 5 Transfer has been started. TransferSuspended = 6 Transfer has been suspended. Unknown = 7 The state is unknown."
  },
  "reference/OnePassword.Common.TrackedList-1.html": {
    "href": "reference/OnePassword.Common.TrackedList-1.html",
    "title": "Class TrackedList<T> | OnePassword.NET",
    "keywords": "Class TrackedList<T> Namespace OnePassword.Common Assembly OnePassword.NET.dll Represents a strongly typed change tracking enabled list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists. [Serializable] public sealed class TrackedList<T> : IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of elements in the list. Inheritance object TrackedList<T> Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors TrackedList() Initializes a new instance of OnePassword.Common.TrackedList`1. public TrackedList() TrackedList(int) Initializes a new instance of OnePassword.Common.TrackedList`1 that is empty and has the specified initial capacity. public TrackedList(int capacity) Parameters capacity int The initial list capacity. TrackedList(IEnumerable<T>) Initializes a new instance of OnePassword.Common.TrackedList`1 that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. public TrackedList(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection to copy to the list. Properties Count Gets the number of elements contained in the OnePassword.Common.TrackedList`1. public int Count { get; } Property Value int IsFixedSize Gets a value indicating whether the System.Collections.IList has a fixed size. public bool IsFixedSize { get; } Property Value bool IsReadOnly Gets a value indicating whether the System.Collections.IList is read-only. public bool IsReadOnly { get; } Property Value bool IsSynchronized Gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread safe). public bool IsSynchronized { get; } Property Value bool SyncRoot Gets an object that can be used to synchronize access to the System.Collections.ICollection. public object SyncRoot { get; } Property Value object this[int] Gets or sets the element at the specified index. public T this[int index] { get; set; } Property Value T Exceptions ArgumentOutOfRangeException index is not a valid index in the System.Collections.Generic.IList`1. NotSupportedException The property is set and the System.Collections.Generic.IList`1 is read-only. Methods Add(object?) Adds an item to the System.Collections.IList. public int Add(object? value) Parameters value object? The object to add to the System.Collections.IList. Returns int The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection. Exceptions NotSupportedException The System.Collections.IList is read-only. -or- The System.Collections.IList has a fixed size. Add(T) Adds an item to the System.Collections.Generic.ICollection`1. public void Add(T item) Parameters item T The object to add to the System.Collections.Generic.ICollection`1. Exceptions NotSupportedException The System.Collections.Generic.ICollection`1 is read-only. Contains(object?) Determines whether the System.Collections.IList contains a specific value. public bool Contains(object? value) Parameters value object? The object to locate in the System.Collections.IList. Returns bool true if the System.Object is found in the System.Collections.IList; otherwise, false. Contains(T) Determines whether the System.Collections.Generic.ICollection`1 contains a specific value. public bool Contains(T item) Parameters item T The object to locate in the System.Collections.Generic.ICollection`1. Returns bool true if item is found in the System.Collections.Generic.ICollection`1; otherwise, false. CopyTo(Array, int) Copies the elements of the System.Collections.ICollection to an System.Array, starting at a particular System.Array index. public void CopyTo(Array array, int index) Parameters array Array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection. The System.Array must have zero-based indexing. index int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException index is less than zero. ArgumentException array is multidimensional. -or- The number of elements in the source System.Collections.ICollection is greater than the available space from index to the end of the destination array. -or- The type of the source System.Collections.ICollection cannot be cast automatically to the type of the destination array. CopyTo(T[], int) Copies the elements of the System.Collections.Generic.ICollection`1 to an System.Array, starting at a particular System.Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.ICollection`1. The System.Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source System.Collections.Generic.ICollection`1 is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. IndexOf(object?) Determines the index of a specific item in the System.Collections.IList. public int IndexOf(object? value) Parameters value object? The object to locate in the System.Collections.IList. Returns int The index of value if found in the list; otherwise, -1. IndexOf(T) Determines the index of a specific item in the System.Collections.Generic.IList`1. public int IndexOf(T item) Parameters item T The object to locate in the System.Collections.Generic.IList`1. Returns int The index of item if found in the list; otherwise, -1. Insert(int, object?) Inserts an item to the System.Collections.IList at the specified index. public void Insert(int index, object? value) Parameters index int The zero-based index at which value should be inserted. value object? The object to insert into the System.Collections.IList. Exceptions ArgumentOutOfRangeException index is not a valid index in the System.Collections.IList. NotSupportedException The System.Collections.IList is read-only. -or- The System.Collections.IList has a fixed size. NullReferenceException value is null reference in the System.Collections.IList. Insert(int, T) Inserts an item to the System.Collections.Generic.IList`1 at the specified index. public void Insert(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The object to insert into the System.Collections.Generic.IList`1. Exceptions ArgumentOutOfRangeException index is not a valid index in the System.Collections.Generic.IList`1. NotSupportedException The System.Collections.Generic.IList`1 is read-only. Remove(object?) Removes the first occurrence of a specific object from the System.Collections.IList. public void Remove(object? value) Parameters value object? The object to remove from the System.Collections.IList. Exceptions NotSupportedException The System.Collections.IList is read-only. -or- The System.Collections.IList has a fixed size. Remove(T) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection`1. public bool Remove(T item) Parameters item T The object to remove from the System.Collections.Generic.ICollection`1. Returns bool true if item was successfully removed from the System.Collections.Generic.ICollection`1; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection`1. Exceptions NotSupportedException The System.Collections.Generic.ICollection`1 is read-only."
  },
  "reference/OnePassword.Common.html": {
    "href": "reference/OnePassword.Common.html",
    "title": "Namespace OnePassword.Common | OnePassword.NET",
    "keywords": "Namespace OnePassword.Common Classes ResultBase<TInterface> Common base class that represents a command result. TrackedList<T> Represents a strongly typed change tracking enabled list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists. Interfaces IResult<T> Defines a command result. Enums Language Represents a language. Mode Represents the 1Password operating mode. State Represents a state."
  },
  "reference/OnePassword.Documents.Document.html": {
    "href": "reference/OnePassword.Documents.Document.html",
    "title": "Class Document | OnePassword.NET",
    "keywords": "Class Document Namespace OnePassword.Documents Assembly OnePassword.NET.dll Represents a 1Password document. public sealed class Document : IDocument Inheritance object Document Implements IDocument Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Id The document ID. [JsonInclude] [JsonPropertyName(\"uuid\")] public string Id { get; } Property Value string"
  },
  "reference/OnePassword.Documents.DocumentDetails.html": {
    "href": "reference/OnePassword.Documents.DocumentDetails.html",
    "title": "Class DocumentDetails | OnePassword.NET",
    "keywords": "Class DocumentDetails Namespace OnePassword.Documents Assembly OnePassword.NET.dll Represents a 1Password document with details. public sealed class DocumentDetails : IDocument Inheritance object DocumentDetails Implements IDocument Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Created The date and time when the document was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTimeOffset Created { get; } Property Value DateTimeOffset Id The document ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string LastEditedUserId The ID of the user that last edited the document. [JsonInclude] [JsonPropertyName(\"last_edited_by\")] public string? LastEditedUserId { get; } Property Value string? Title The document title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string Updated The date and time when the document was updated. [JsonInclude] [JsonPropertyName(\"updated_at\")] public DateTimeOffset Updated { get; } Property Value DateTimeOffset Vault The vault the document is stored in. [JsonInclude] [JsonPropertyName(\"vault\")] public Vault? Vault { get; } Property Value Vault?"
  },
  "reference/OnePassword.Documents.IDocument.html": {
    "href": "reference/OnePassword.Documents.IDocument.html",
    "title": "Interface IDocument | OnePassword.NET",
    "keywords": "Interface IDocument Namespace OnePassword.Documents Assembly OnePassword.NET.dll Defines a 1Password document. public interface IDocument Properties Id The document ID. string Id { get; } Property Value string"
  },
  "reference/OnePassword.Documents.html": {
    "href": "reference/OnePassword.Documents.html",
    "title": "Namespace OnePassword.Documents | OnePassword.NET",
    "keywords": "Namespace OnePassword.Documents Classes Document Represents a 1Password document. DocumentDetails Represents a 1Password document with details. Interfaces IDocument Defines a 1Password document."
  },
  "reference/OnePassword.Groups.Group.html": {
    "href": "reference/OnePassword.Groups.Group.html",
    "title": "Class Group | OnePassword.NET",
    "keywords": "Class Group Namespace OnePassword.Groups Assembly OnePassword.NET.dll Represents a 1Password group. public sealed class Group : GroupBase, IGroup, IResult<IGroup>, IEquatable<IResult<IGroup>>, IComparable<IResult<IGroup>>, IComparable Inheritance object ResultBase<IGroup> GroupBase Group Implements IGroup IResult<IGroup> IEquatable<IResult<IGroup>> IComparable<IResult<IGroup>> IComparable Inherited Members GroupBase.Description GroupBase.State GroupBase.Created ResultBase<IGroup>.Id ResultBase<IGroup>.Name ResultBase<IGroup>.Deconstruct(out string, out string) ResultBase<IGroup>.CompareTo(object?) ResultBase<IGroup>.CompareTo(IResult<IGroup>?) ResultBase<IGroup>.Equals(IResult<IGroup>?) ResultBase<IGroup>.Equals(object?) ResultBase<IGroup>.ToString() ResultBase<IGroup>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "reference/OnePassword.Groups.GroupBase.html": {
    "href": "reference/OnePassword.Groups.GroupBase.html",
    "title": "Class GroupBase | OnePassword.NET",
    "keywords": "Class GroupBase Namespace OnePassword.Groups Assembly OnePassword.NET.dll Common base class that represents a 1Password group. public abstract class GroupBase : ResultBase<IGroup>, IGroup, IResult<IGroup>, IEquatable<IResult<IGroup>>, IComparable<IResult<IGroup>>, IComparable Inheritance object ResultBase<IGroup> GroupBase Derived Group GroupDetails UserGroup VaultGroup Implements IGroup IResult<IGroup> IEquatable<IResult<IGroup>> IComparable<IResult<IGroup>> IComparable Inherited Members ResultBase<IGroup>.Id ResultBase<IGroup>.Name ResultBase<IGroup>.Deconstruct(out string, out string) ResultBase<IGroup>.CompareTo(object?) ResultBase<IGroup>.CompareTo(IResult<IGroup>?) ResultBase<IGroup>.Equals(IResult<IGroup>?) ResultBase<IGroup>.Equals(object?) ResultBase<IGroup>.ToString() ResultBase<IGroup>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties Created The date and time when the group was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTimeOffset Created { get; } Property Value DateTimeOffset Description The group description. [JsonInclude] [JsonPropertyName(\"description\")] public string Description { get; } Property Value string State The state of the group. [JsonInclude] [JsonPropertyName(\"state\")] public State State { get; } Property Value State"
  },
  "reference/OnePassword.Groups.GroupDetails.html": {
    "href": "reference/OnePassword.Groups.GroupDetails.html",
    "title": "Class GroupDetails | OnePassword.NET",
    "keywords": "Class GroupDetails Namespace OnePassword.Groups Assembly OnePassword.NET.dll Represents a 1Password group with details. public sealed class GroupDetails : GroupBase, IGroup, IResult<IGroup>, IEquatable<IResult<IGroup>>, IComparable<IResult<IGroup>>, IComparable Inheritance object ResultBase<IGroup> GroupBase GroupDetails Implements IGroup IResult<IGroup> IEquatable<IResult<IGroup>> IComparable<IResult<IGroup>> IComparable Inherited Members GroupBase.Description GroupBase.State GroupBase.Created ResultBase<IGroup>.Id ResultBase<IGroup>.Name ResultBase<IGroup>.Deconstruct(out string, out string) ResultBase<IGroup>.CompareTo(object?) ResultBase<IGroup>.CompareTo(IResult<IGroup>?) ResultBase<IGroup>.Equals(IResult<IGroup>?) ResultBase<IGroup>.Equals(object?) ResultBase<IGroup>.ToString() ResultBase<IGroup>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Permissions The group permissions. [JsonInclude] [JsonPropertyName(\"permissions\")] public ImmutableList<GroupPermission> Permissions { get; } Property Value ImmutableList<GroupPermission> Type The group type. [JsonInclude] [JsonPropertyName(\"type\")] public GroupType Type { get; } Property Value GroupType Updated The date and time when the group was last updated. [JsonInclude] [JsonPropertyName(\"updated_at\")] public DateTimeOffset Updated { get; } Property Value DateTimeOffset"
  },
  "reference/OnePassword.Groups.GroupPermission.html": {
    "href": "reference/OnePassword.Groups.GroupPermission.html",
    "title": "Enum GroupPermission | OnePassword.NET",
    "keywords": "Enum GroupPermission Namespace OnePassword.Groups Assembly OnePassword.NET.dll Represents a 1Password group permission. [JsonConverter(typeof(JsonStringEnumConverterEx<GroupPermission>))] public enum GroupPermission Fields AddPerson = 0 Add Person ChangePersonName = 1 Change Person Name ChangeTeamAttributes = 2 Change Team Attributes ChangeTeamDomain = 3 Change Team Domain ChangeTeamSettings = 4 Change Team Settings CreateVaults = 5 Create Vaults DeletePerson = 6 Delete Person DeleteTeam = 7 Delete Team ManageBilling = 8 Manage Billing ManageGroups = 9 Manage Groups ManageTemplates = 10 Manage Templates ManageVaults = 11 Manage Vaults RecoverAccounts = 12 Recover Accounts SuspendPerson = 13 Suspend Person SuspendTeam = 14 Suspend Team Unknown = 22 The group permission is unknown. ViewActivitiesLog = 15 View Activities Log ViewAdministrativeSidebar = 16 View Administrative Sidebar ViewBilling = 17 View Billing ViewPeople = 18 View People ViewTeamSettings = 19 View Team Settings ViewTemplates = 20 View Templates ViewVaults = 21 View Vaults"
  },
  "reference/OnePassword.Groups.GroupType.html": {
    "href": "reference/OnePassword.Groups.GroupType.html",
    "title": "Enum GroupType | OnePassword.NET",
    "keywords": "Enum GroupType Namespace OnePassword.Groups Assembly OnePassword.NET.dll Represents type of 1Password group. [JsonConverter(typeof(JsonStringEnumConverterEx<GroupType>))] public enum GroupType Fields Administrators = 0 Administrators Owners = 1 Owners Recovery = 2 Recovery TeamMembers = 3 Team Members Unknown = 4 The group type is unknown. User = 5 The group type is user defined."
  },
  "reference/OnePassword.Groups.IGroup.html": {
    "href": "reference/OnePassword.Groups.IGroup.html",
    "title": "Interface IGroup | OnePassword.NET",
    "keywords": "Interface IGroup Namespace OnePassword.Groups Assembly OnePassword.NET.dll Defines a 1Password group. public interface IGroup : IResult<IGroup>, IEquatable<IResult<IGroup>>, IComparable<IResult<IGroup>>, IComparable Implements IResult<IGroup> IEquatable<IResult<IGroup>> IComparable<IResult<IGroup>> IComparable"
  },
  "reference/OnePassword.Groups.UserGroup.html": {
    "href": "reference/OnePassword.Groups.UserGroup.html",
    "title": "Class UserGroup | OnePassword.NET",
    "keywords": "Class UserGroup Namespace OnePassword.Groups Assembly OnePassword.NET.dll Represents a 1Password group associated with a user. public sealed class UserGroup : GroupBase, IGroup, IResult<IGroup>, IEquatable<IResult<IGroup>>, IComparable<IResult<IGroup>>, IComparable Inheritance object ResultBase<IGroup> GroupBase UserGroup Implements IGroup IResult<IGroup> IEquatable<IResult<IGroup>> IComparable<IResult<IGroup>> IComparable Inherited Members GroupBase.Description GroupBase.State GroupBase.Created ResultBase<IGroup>.Id ResultBase<IGroup>.Name ResultBase<IGroup>.Deconstruct(out string, out string) ResultBase<IGroup>.CompareTo(object?) ResultBase<IGroup>.CompareTo(IResult<IGroup>?) ResultBase<IGroup>.Equals(IResult<IGroup>?) ResultBase<IGroup>.Equals(object?) ResultBase<IGroup>.ToString() ResultBase<IGroup>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "reference/OnePassword.Groups.VaultGroup.html": {
    "href": "reference/OnePassword.Groups.VaultGroup.html",
    "title": "Class VaultGroup | OnePassword.NET",
    "keywords": "Class VaultGroup Namespace OnePassword.Groups Assembly OnePassword.NET.dll Represents a 1Password group associated with a vault. public sealed class VaultGroup : GroupBase, IGroup, IResult<IGroup>, IEquatable<IResult<IGroup>>, IComparable<IResult<IGroup>>, IComparable Inheritance object ResultBase<IGroup> GroupBase VaultGroup Implements IGroup IResult<IGroup> IEquatable<IResult<IGroup>> IComparable<IResult<IGroup>> IComparable Inherited Members GroupBase.Description GroupBase.State GroupBase.Created ResultBase<IGroup>.Id ResultBase<IGroup>.Name ResultBase<IGroup>.Deconstruct(out string, out string) ResultBase<IGroup>.CompareTo(object?) ResultBase<IGroup>.CompareTo(IResult<IGroup>?) ResultBase<IGroup>.Equals(IResult<IGroup>?) ResultBase<IGroup>.Equals(object?) ResultBase<IGroup>.ToString() ResultBase<IGroup>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Permissions The group's permissions for the vault. [JsonInclude] [JsonPropertyName(\"permissions\")] public ImmutableList<VaultPermission> Permissions { get; } Property Value ImmutableList<VaultPermission>"
  },
  "reference/OnePassword.Groups.html": {
    "href": "reference/OnePassword.Groups.html",
    "title": "Namespace OnePassword.Groups | OnePassword.NET",
    "keywords": "Namespace OnePassword.Groups Classes Group Represents a 1Password group. GroupBase Common base class that represents a 1Password group. GroupDetails Represents a 1Password group with details. UserGroup Represents a 1Password group associated with a user. VaultGroup Represents a 1Password group associated with a vault. Interfaces IGroup Defines a 1Password group. Enums GroupPermission Represents a 1Password group permission. GroupType Represents type of 1Password group."
  },
  "reference/OnePassword.IOnePasswordManager.html": {
    "href": "reference/OnePassword.IOnePasswordManager.html",
    "title": "Interface IOnePasswordManager | OnePassword.NET",
    "keywords": "Interface IOnePasswordManager Namespace OnePassword Assembly OnePassword.NET.dll Defines a 1Password CLI executable manager. public interface IOnePasswordManager Properties Version The version of the 1Password CLI executable. string Version { get; } Property Value string Methods AddAccount(string, string, string, string, string) Adds an account. void AddAccount(string address, string email, string secretKey, string password, string shorthand = \"\") Parameters address string The account address. email string The account email. secretKey string The account secret key. password string The account password. shorthand string The account shorthand. Exceptions ArgumentException Thrown when there is an invalid argument. ArchiveDocument(IDocument, IVault) Archives a document. void ArchiveDocument(IDocument document, IVault vault) Parameters document IDocument The document to archive. vault IVault The vault that contains the document to archive. Exceptions ArgumentException Thrown when there is an invalid argument. ArchiveDocument(string, string) Archives a document. void ArchiveDocument(string documentId, string vaultId) Parameters documentId string The ID of the document to archive. vaultId string The ID of the vault that contains the document to archive. Exceptions ArgumentException Thrown when there is an invalid argument. ArchiveItem(IItem, IVault) Archives an item. void ArchiveItem(IItem item, IVault vault) Parameters item IItem The item to archive. vault IVault The vault that contains the item to archive. Exceptions ArgumentException Thrown when there is an invalid argument. ArchiveItem(string, string) Archives an item. void ArchiveItem(string itemId, string vaultId) Parameters itemId string The ID of the item to archive. vaultId string The ID of the vault that contains the item to archive. Exceptions ArgumentException Thrown when there is an invalid argument. ConfirmAllUsers() Confirms all users. void ConfirmAllUsers() ConfirmUser(IUser) Confirms a user. void ConfirmUser(IUser user) Parameters user IUser The user to confirm. Exceptions ArgumentException Thrown when there is an invalid argument. ConfirmUser(string) Confirms a user. void ConfirmUser(string userId) Parameters userId string The ID of the user to confirm. Exceptions ArgumentException Thrown when there is an invalid argument. CreateDocument(IVault, string, string?, string?, IReadOnlyCollection<string>?) Creates a document. Document CreateDocument(IVault vault, string filePath, string? fileName = null, string? title = null, IReadOnlyCollection<string>? tags = null) Parameters vault IVault The vault in which to create the document. filePath string The path to the file to upload. fileName string? The document's filename. title string? The document's title. tags IReadOnlyCollection<string>? The document's tags. Returns Document The created document. Exceptions ArgumentException Thrown when there is an invalid argument. CreateDocument(string, string, string?, string?, IReadOnlyCollection<string>?) Creates a document. Document CreateDocument(string vaultId, string filePath, string? fileName = null, string? title = null, IReadOnlyCollection<string>? tags = null) Parameters vaultId string The ID of the vault in which to create the document. filePath string The path to the file to upload. fileName string? The document's filename. title string? The document's title. tags IReadOnlyCollection<string>? The document's tags. Returns Document The created document. Exceptions ArgumentException Thrown when there is an invalid argument. CreateGroup(string, string?) Create a group. GroupDetails CreateGroup(string name, string? description = null) Parameters name string The group name. description string? The group description. Returns GroupDetails The created group. Exceptions ArgumentException Thrown when there is an invalid argument. CreateItem(Template, IVault) Creates an item. Item CreateItem(Template template, IVault vault) Parameters template Template The template from which to create the item. vault IVault The vault in which to create the item. Returns Item The created item. Exceptions ArgumentException Thrown when there is an invalid argument. CreateItem(Template, string) Creates an item. Item CreateItem(Template template, string vaultId) Parameters template Template The template from which to create the item. vaultId string The ID of the vault in which to create the item. Returns Item The created item. Exceptions ArgumentException Thrown when there is an invalid argument. CreateVault(string, string?, VaultIcon, bool?) Creates a vault. VaultDetails CreateVault(string name, string? description = null, VaultIcon icon = VaultIcon.Default, bool? allowAdminsToManage = null) Parameters name string The vault name. description string? The vault description. icon VaultIcon The vault icon. allowAdminsToManage bool? When true, allows administrators to manage the vault. Returns VaultDetails The created vault. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteDocument(IDocument, IVault) Deletes a document. void DeleteDocument(IDocument document, IVault vault) Parameters document IDocument The document to delete. vault IVault The vault that contains the document to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteDocument(string, string) Deletes a document. void DeleteDocument(string documentId, string vaultId) Parameters documentId string The ID of the document to delete. vaultId string The ID of the vault that contains the document to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteGroup(IGroup) Deletes a group. void DeleteGroup(IGroup group) Parameters group IGroup The group to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteGroup(string) Deletes a group. void DeleteGroup(string groupId) Parameters groupId string The ID of the group to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteItem(IItem, IVault) Deletes an item. void DeleteItem(IItem item, IVault vault) Parameters item IItem The item to delete. vault IVault The vault that contains the item to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteItem(string, string) Deletes an item. void DeleteItem(string itemId, string vaultId) Parameters itemId string The ID of the item to delete. vaultId string The ID of the vault that contains the item to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteUser(IUser) Deletes a user. void DeleteUser(IUser user) Parameters user IUser The user to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteUser(string) Deletes a user. void DeleteUser(string userId) Parameters userId string The ID of the user to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteVault(IVault) Deletes a vault. void DeleteVault(IVault vault) Parameters vault IVault The vault to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteVault(string) Deletes a vault. void DeleteVault(string vaultId) Parameters vaultId string The ID of the vault to delete. Exceptions ArgumentException Thrown when there is an invalid argument. EditGroup(IGroup, string?, string?) Edits a group. void EditGroup(IGroup group, string? name = null, string? description = null) Parameters group IGroup The group to edit. name string? The group's new name. description string? The group's new description. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditGroup(string, string?, string?) Edits a group. void EditGroup(string groupId, string? name = null, string? description = null) Parameters groupId string The ID of the group to edit. name string? The group's new name. description string? The group's new description. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditItem(Item, IVault) Edits an item. Item EditItem(Item item, IVault vault) Parameters item Item The item to edit. vault IVault The vault that contains the item to edit. Returns Item The edited item. Exceptions ArgumentException Thrown when there is an invalid argument. EditItem(Item, string) Edits an item. Item EditItem(Item item, string vaultId) Parameters item Item The item to edit. vaultId string The ID of the vault that contains the item to edit. Returns Item The edited item. Exceptions ArgumentException Thrown when there is an invalid argument. EditUser(IUser, string?, bool?) Edits a user. void EditUser(IUser user, string? name = null, bool? travelMode = null) Parameters user IUser The user to edit. name string? The user's new name. travelMode bool? When true, enables travel mode on the vault. If enabled, false disables it. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditUser(string, string?, bool?) Edits a user. void EditUser(string userId, string? name = null, bool? travelMode = null) Parameters userId string The ID of the user to edit. name string? The user's new name. travelMode bool? When true, enables travel mode on the vault. If enabled, false disables it. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditVault(IVault, string?, string?, VaultIcon, bool?) Edits a vault. void EditVault(IVault vault, string? name = null, string? description = null, VaultIcon icon = VaultIcon.Default, bool? travelMode = null) Parameters vault IVault The vault to edit. name string? The vault's new name. description string? The vault's new description. icon VaultIcon The vault's new icon. travelMode bool? When true, enables travel mode on the vault. If enabled, false disables it. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditVault(string, string?, string?, VaultIcon, bool?) Edits a vault. void EditVault(string vaultId, string? name = null, string? description = null, VaultIcon icon = VaultIcon.Default, bool? travelMode = null) Parameters vaultId string The ID of the vault to edit. name string? The vault's new name. description string? The vault's new description. icon VaultIcon The vault's new icon. travelMode bool? When true, enables travel mode on the vault. If enabled, false disables it. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. ForgetAccount(bool) Forgets the account. ImmutableList<string> ForgetAccount(bool all = false) Parameters all bool When true, forgets all accounts. Returns ImmutableList<string> The list of accounts that were forgotten. GetAccount(string) Gets the account details. AccountDetails GetAccount(string account = \"\") Parameters account string The account to retrieve. Returns AccountDetails The account details. GetAccounts() Gets the accounts. ImmutableList<Account> GetAccounts() Returns ImmutableList<Account> The list of accounts. GetDocument(IDocument, IVault, string, string?) Gets a document. void GetDocument(IDocument document, IVault vault, string filePath, string? fileMode = null) Parameters document IDocument The document to retrieve. vault IVault The vault that contains the document to retrieve. filePath string The file path to save the document to. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. GetDocument(string, string, string, string?) Gets a document. void GetDocument(string documentId, string vaultId, string filePath, string? fileMode = null) Parameters documentId string The ID of the document to retrieve. vaultId string The ID of the vault that contains the document to retrieve. filePath string The file path to save the document to. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. GetDocuments(IVault) Gets a vault's documents. ImmutableList<DocumentDetails> GetDocuments(IVault vault) Parameters vault IVault The vault that contains the documents to retrieve. Returns ImmutableList<DocumentDetails> The vault's documents. Exceptions ArgumentException Thrown when there is an invalid argument. GetDocuments(string) Gets a vault's documents. ImmutableList<DocumentDetails> GetDocuments(string vaultId) Parameters vaultId string The ID of the vault that contains the documents to retrieve. Returns ImmutableList<DocumentDetails> The vault's documents. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroup(IGroup) Gets the group's details. GroupDetails GetGroup(IGroup group) Parameters group IGroup The group to retrieve. Returns GroupDetails The group details. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroup(string) Gets the group's details. GroupDetails GetGroup(string groupId) Parameters groupId string The ID of the group to retrieve. Returns GroupDetails The group details. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroupUsers(string) Gets a group's users. ImmutableList<GroupUser> GetGroupUsers(string groupId) Parameters groupId string The ID of the group for which to retrieve users. Returns ImmutableList<GroupUser> The group's users. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroupVaults(string) Gets a group's vaults. ImmutableList<Vault> GetGroupVaults(string groupId) Parameters groupId string The ID of the group to retrieve vaults for. Returns ImmutableList<Vault> The group's vaults. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroups() Gets the groups. ImmutableList<Group> GetGroups() Returns ImmutableList<Group> The list of groups. GetGroups(IVault) Gets a vault's groups. ImmutableList<VaultGroup> GetGroups(IVault vault) Parameters vault IVault The vault for which to retrieve groups. Returns ImmutableList<VaultGroup> The vault's groups. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroups(IUser) Gets a user's groups. ImmutableList<UserGroup> GetGroups(IUser user) Parameters user IUser The user for which to retrieve groups. Returns ImmutableList<UserGroup> The user's groups. Exceptions ArgumentException Thrown when there is an invalid argument. GetItem(IItem, IVault) Gets an item. Item GetItem(IItem item, IVault vault) Parameters item IItem The item to retrieve. vault IVault The vault that contains the item to retrieve. Returns Item The item details. Exceptions ArgumentException Thrown when there is an invalid argument. GetItem(string, string) Gets an item. Item GetItem(string itemId, string vaultId) Parameters itemId string The ID of the item to retrieve. vaultId string The ID of the vault that contains the item to retrieve. Returns Item The item details. Exceptions ArgumentException Thrown when there is an invalid argument. GetItems(IVault) Gets a vault's items. ImmutableList<Item> GetItems(IVault vault) Parameters vault IVault The vault that contains the items to retrieve. Returns ImmutableList<Item> The vault's items. Exceptions ArgumentException Thrown when there is an invalid argument. GetItems(string) Gets a vault's items. ImmutableList<Item> GetItems(string vaultId) Parameters vaultId string The ID of the vault that contains the items to retrieve. Returns ImmutableList<Item> The vault's items. Exceptions ArgumentException Thrown when there is an invalid argument. GetSecret(string) Gets a secret. string GetSecret(string reference) Parameters reference string The reference to the secret. Returns string Returns the secret. Exceptions ArgumentException Thrown when there is an invalid argument. GetTemplate(ITemplate) Gets a template. Template GetTemplate(ITemplate template) Parameters template ITemplate The template to retrieve. Returns Template The template details. Exceptions ArgumentException Thrown when there is an invalid argument. GetTemplate(string) Gets a template. Template GetTemplate(string name) Parameters name string The template name to retrieve. Returns Template The template details. Exceptions ArgumentException Thrown when there is an invalid argument. GetTemplate(Category) Gets a template. Template GetTemplate(Category category) Parameters category Category The template category. Returns Template The template details. Exceptions ArgumentException Thrown when there is an invalid argument. GetTemplates() Gets the templates. ImmutableList<TemplateInfo> GetTemplates() Returns ImmutableList<TemplateInfo> The list of templates. GetUser(IUser) Gets the user's details. UserDetails GetUser(IUser user) Parameters user IUser The user to retrieve. Returns UserDetails The user details. Exceptions ArgumentException Thrown when there is an invalid argument. GetUser(string) Gets the user's details. UserDetails GetUser(string userId) Parameters userId string The ID of the user to retrieve. Returns UserDetails The user details. Exceptions ArgumentException Thrown when there is an invalid argument. GetUserGroups(string) Gets a user's groups. ImmutableList<UserGroup> GetUserGroups(string userId) Parameters userId string The ID of the user for which to retrieve groups. Returns ImmutableList<UserGroup> The user's groups. Exceptions ArgumentException Thrown when there is an invalid argument. GetUserVaults(string) Gets a user's vaults. ImmutableList<Vault> GetUserVaults(string userId) Parameters userId string The ID of the user to retrieve vaults for. Returns ImmutableList<Vault> The user's vaults. Exceptions ArgumentException Thrown when there is an invalid argument. GetUsers() Gets the users. ImmutableList<User> GetUsers() Returns ImmutableList<User> The list of users. GetUsers(IGroup) Gets a group's users. ImmutableList<GroupUser> GetUsers(IGroup group) Parameters group IGroup The group for which to retrieve users. Returns ImmutableList<GroupUser> The group's users. Exceptions ArgumentException Thrown when there is an invalid argument. GetUsers(IVault) Gets a vault's users. ImmutableList<VaultUser> GetUsers(IVault vault) Parameters vault IVault The vault for which to retrieve users. Returns ImmutableList<VaultUser> The vault's users. Exceptions ArgumentException Thrown when there is an invalid argument. GetVault(IVault) Gets a vault. VaultDetails GetVault(IVault vault) Parameters vault IVault The vault to retrieve. Returns VaultDetails The vault details. Exceptions ArgumentException Thrown when there is an invalid argument. GetVault(string) Gets a vault. VaultDetails GetVault(string vaultId) Parameters vaultId string The ID of the vault to retrieve. Returns VaultDetails The vault details. Exceptions ArgumentException Thrown when there is an invalid argument. GetVaultGroups(string) Gets a vault's groups. ImmutableList<VaultGroup> GetVaultGroups(string vaultId) Parameters vaultId string The ID of the vault for which to retrieve groups. Returns ImmutableList<VaultGroup> The vault's groups. Exceptions ArgumentException Thrown when there is an invalid argument. GetVaultUsers(string) Gets a vault's users. ImmutableList<VaultUser> GetVaultUsers(string vaultId) Parameters vaultId string The ID of the vault for which to retrieve users. Returns ImmutableList<VaultUser> The vault's users. Exceptions ArgumentException Thrown when there is an invalid argument. GetVaults() Gets the vaults. ImmutableList<Vault> GetVaults() Returns ImmutableList<Vault> The list of vaults. GetVaults(IGroup) Gets a group's vaults. ImmutableList<Vault> GetVaults(IGroup group) Parameters group IGroup The group to retrieve vaults for. Returns ImmutableList<Vault> The group's vaults. Exceptions ArgumentException Thrown when there is an invalid argument. GetVaults(IUser) Gets a user's vaults. ImmutableList<Vault> GetVaults(IUser user) Parameters user IUser The user to retrieve vaults for. Returns ImmutableList<Vault> The user's vaults. Exceptions ArgumentException Thrown when there is an invalid argument. GrantAccess(IGroup, IUser, UserRole) Grants a user access to a group. void GrantAccess(IGroup group, IUser user, UserRole userRole = UserRole.Member) Parameters group IGroup The group to grant access from. user IUser The user to grant access to. userRole UserRole The user role to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantAccess(string, string, UserRole) Grants a user access to a group. void GrantAccess(string groupId, string userId, UserRole userRole = UserRole.Member) Parameters groupId string The ID of the group to grant access from. userId string The ID of the user to grant access to. userRole UserRole The user role to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantGroupPermissions(string, string, IReadOnlyCollection<VaultPermission>) Grants a group permissions to a vault. void GrantGroupPermissions(string vaultId, string groupId, IReadOnlyCollection<VaultPermission> permissions) Parameters vaultId string The ID of the vault to grant permissions from. groupId string The ID of the group to grant permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantPermissions(IVault, IGroup, IReadOnlyCollection<VaultPermission>) Grants a group permissions to a vault. void GrantPermissions(IVault vault, IGroup group, IReadOnlyCollection<VaultPermission> permissions) Parameters vault IVault The vault to grant permissions from. group IGroup The group to grant permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantPermissions(IVault, IUser, IReadOnlyCollection<VaultPermission>) Grants a user permissions to a vault. void GrantPermissions(IVault vault, IUser user, IReadOnlyCollection<VaultPermission> permissions) Parameters vault IVault The vault to grant permissions from. user IUser The user to grant permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantUserPermissions(string, string, IReadOnlyCollection<VaultPermission>) Grants a user permissions to a vault. void GrantUserPermissions(string vaultId, string userId, IReadOnlyCollection<VaultPermission> permissions) Parameters vaultId string The ID of the vault to grant permissions from. userId string The ID of the user to grant permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to grant. Exceptions ArgumentException Thrown when there is an invalid argument. ProvisionUser(string, string, Language) Provisions a user. UserDetails ProvisionUser(string name, string emailAddress, Language language = Language.Default) Parameters name string The user name. emailAddress string The user email address. language Language The user language. Returns UserDetails The provisioned user. Exceptions ArgumentException Thrown when there is an invalid argument. ReactivateUser(IUser) Reactivates a user. void ReactivateUser(IUser user) Parameters user IUser The user to reactivate. Exceptions ArgumentException Thrown when there is an invalid argument. ReactivateUser(string) Reactivates a user. void ReactivateUser(string userId) Parameters userId string The ID of the user to reactivate. Exceptions ArgumentException Thrown when there is an invalid argument. ReplaceDocument(IDocument, IVault, string, string?, string?, IReadOnlyCollection<string>?) Replaces a document. void ReplaceDocument(IDocument document, IVault vault, string filePath, string? fileName = null, string? title = null, IReadOnlyCollection<string>? tags = null) Parameters document IDocument The document to replace. vault IVault The vault that contains the document to replace. filePath string The path to the file to upload. fileName string? The document's filename. title string? The document's title. tags IReadOnlyCollection<string>? The document's tags. Exceptions ArgumentException Thrown when there is an invalid argument. ReplaceDocument(string, string, string, string?, string?, IReadOnlyCollection<string>?) Replaces a document. void ReplaceDocument(string documentId, string vaultId, string filePath, string? fileName = null, string? title = null, IReadOnlyCollection<string>? tags = null) Parameters documentId string The ID of the document to replace. vaultId string The ID of the vault that contains the document to replace. filePath string The path to the file to upload. fileName string? The document's filename. title string? The document's title. tags IReadOnlyCollection<string>? The document's tags. Exceptions ArgumentException Thrown when there is an invalid argument. RevokeAccess(IGroup, IUser) Revokes a user's access to a group. void RevokeAccess(IGroup group, IUser user) Parameters group IGroup The group to revoke access from. user IUser The user to revoke access to. Exceptions ArgumentException Thrown when there is an invalid argument. RevokeAccess(string, string) Revokes a user's access to a group. void RevokeAccess(string groupId, string userId) Parameters groupId string The ID of the group to revoke access from. userId string The ID of the user to revoke access to. Exceptions ArgumentException Thrown when there is an invalid argument. RevokeGroupPermissions(string, string, IReadOnlyCollection<VaultPermission>) Revokes a group's permissions to a vault. void RevokeGroupPermissions(string vaultId, string groupId, IReadOnlyCollection<VaultPermission> permissions) Parameters vaultId string The ID of the vault to revoke permissions from. groupId string The ID of the group to revoke permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to revoke. Exceptions ArgumentException Thrown when there is an invalid argument. RevokePermissions(IVault, IGroup, IReadOnlyCollection<VaultPermission>) Revokes a group's permissions to a vault. void RevokePermissions(IVault vault, IGroup group, IReadOnlyCollection<VaultPermission> permissions) Parameters vault IVault The vault to revoke permissions from. group IGroup The group to revoke permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to revoke. Exceptions ArgumentException Thrown when there is an invalid argument. RevokePermissions(IVault, IUser, IReadOnlyCollection<VaultPermission>) Revokes a user's permissions to a vault. void RevokePermissions(IVault vault, IUser user, IReadOnlyCollection<VaultPermission> permissions) Parameters vault IVault The vault to revoke permissions from. user IUser The user to revoke permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to revoke. Exceptions ArgumentException Thrown when there is an invalid argument. RevokeUserPermissions(string, string, IReadOnlyCollection<VaultPermission>) Revokes a user's permissions to a vault. void RevokeUserPermissions(string vaultId, string userId, IReadOnlyCollection<VaultPermission> permissions) Parameters vaultId string The ID of the vault to revoke permissions from. userId string The ID of the user to revoke permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to revoke. Exceptions ArgumentException Thrown when there is an invalid argument. SaveSecret(string, string, string?) Saves a secret. void SaveSecret(string reference, string filePath, string? fileMode = null) Parameters reference string The reference to the secret. filePath string The file path to save the document to. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForDocument(IDocument, string, IVault?, bool?, string?) Searches for a document. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. void SearchForDocument(IDocument document, string filePath, IVault? vault = null, bool? includeArchive = null, string? fileMode = null) Parameters document IDocument The document to search for. filePath string The file path to save the document to. vault IVault? The vault that contains the document to search for. includeArchive bool? When true, includes archived documents in the search. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForDocument(string, string, string?, bool?, string?) Searches for a document. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. void SearchForDocument(string documentId, string filePath, string? vaultId = null, bool? includeArchive = null, string? fileMode = null) Parameters documentId string The ID of the document to search for. filePath string The file path to save the document to. vaultId string? The ID of the vault that contains the document to search for. includeArchive bool? When true, includes archived documents in the search. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForDocuments(IVault, bool?) Searches for an document. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. ImmutableList<DocumentDetails> SearchForDocuments(IVault vault, bool? includeArchive = null) Parameters vault IVault The vault that contains the documents to search for. includeArchive bool? When true, includes archived documents in the search. Returns ImmutableList<DocumentDetails> The documents that match the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForDocuments(string?, bool?) Searches for an document. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. ImmutableList<DocumentDetails> SearchForDocuments(string? vaultId = null, bool? includeArchive = null) Parameters vaultId string? The ID of the vault that contains the documents to search for. includeArchive bool? When true, includes archived documents in the search. Returns ImmutableList<DocumentDetails> The documents that match the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForItem(IItem, IVault?, bool?) Searches for an item. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. Item SearchForItem(IItem item, IVault? vault = null, bool? includeArchive = null) Parameters item IItem The item to search for. vault IVault? The vault that contains the item to search for. includeArchive bool? When true, includes archived items in the search. Returns Item The item that matches the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForItem(string, string?, bool?) Searches for an item. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. Item SearchForItem(string itemId, string? vaultId = null, bool? includeArchive = null) Parameters itemId string The ID of the item to search for. vaultId string? The ID of the vault that contains the item to search for. includeArchive bool? When true, includes archived items in the search. Returns Item The item that matches the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForItems(IVault, bool?, bool?, IReadOnlyCollection<Category>?, IReadOnlyCollection<string>?) Searches for an item. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. ImmutableList<Item> SearchForItems(IVault vault, bool? includeArchive = null, bool? favorite = null, IReadOnlyCollection<Category>? categories = null, IReadOnlyCollection<string>? tags = null) Parameters vault IVault The vault that contains the items to search for. includeArchive bool? When true, includes archived items in the search. favorite bool? When true, searches for favorites. categories IReadOnlyCollection<Category>? The categories to search for. tags IReadOnlyCollection<string>? The tags to search for. Returns ImmutableList<Item> The items that match the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForItems(string?, bool?, bool?, IReadOnlyCollection<Category>?, IReadOnlyCollection<string>?) Searches for an item. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. ImmutableList<Item> SearchForItems(string? vaultId = null, bool? includeArchive = null, bool? favorite = null, IReadOnlyCollection<Category>? categories = null, IReadOnlyCollection<string>? tags = null) Parameters vaultId string? The ID of the vault that contains the items to search for. includeArchive bool? When true, includes archived items in the search. favorite bool? When true, searches for favorites. categories IReadOnlyCollection<Category>? The categories to search for. tags IReadOnlyCollection<string>? The tags to search for. Returns ImmutableList<Item> The items that match the search. Exceptions ArgumentException Thrown when there is an invalid argument. SignIn(string?) Signs in to the account. void SignIn(string? password = null) Parameters password string? The account password to use when manually signing in. Exceptions ArgumentException Thrown when there is an invalid argument. SignOut(bool) Signs out of the account. void SignOut(bool all = false) Parameters all bool When true, signs out of all accounts. SuspendUser(IUser, int?) Suspends a user. void SuspendUser(IUser user, int? deauthorizeDevicesDelay = null) Parameters user IUser The user to suspend. deauthorizeDevicesDelay int? The number of seconds to delay deauthorizing devices after the user has been suspended. Exceptions ArgumentException Thrown when there is an invalid argument. SuspendUser(string, int?) Suspends a user. void SuspendUser(string userId, int? deauthorizeDevicesDelay = null) Parameters userId string The ID of the user to suspend. deauthorizeDevicesDelay int? The number of seconds to delay deauthorizing devices after the user has been suspended. Exceptions ArgumentException Thrown when there is an invalid argument. Update() Updates the 1Password CLI executable. bool Update() Returns bool Returns true when the 1Password CLI executable has been updated, false otherwise. UseAccount(string) Uses the account. void UseAccount(string account) Parameters account string The account to use. Exceptions ArgumentException Thrown when there is an invalid argument."
  },
  "reference/OnePassword.IOnePasswordManagerOptions.html": {
    "href": "reference/OnePassword.IOnePasswordManagerOptions.html",
    "title": "Interface IOnePasswordManagerOptions | OnePassword.NET",
    "keywords": "Interface IOnePasswordManagerOptions Namespace OnePassword Assembly OnePassword.NET.dll Defines the 1Password manager options. public interface IOnePasswordManagerOptions Properties AppIntegrated Set to true when authentication is integrated into the 1Password desktop application (see documentation). When false , a password or service account token will be required to sign in. Defaults to false. bool AppIntegrated { get; set; } Property Value bool Executable The name of the 1Password CLI executable. Defaults to 'op.exe'. string Executable { get; set; } Property Value string Path The path to the 1Password CLI executable. Defaults to the current working directory. string Path { get; set; } Property Value string ServiceAccountToken The service account token. If a token is provided, login will not be required. string ServiceAccountToken { get; set; } Property Value string Verbose When true, commands sent to the 1Password CLI executable are output to the console. Defaults to false. bool Verbose { get; set; } Property Value bool"
  },
  "reference/OnePassword.Items.Category.html": {
    "href": "reference/OnePassword.Items.Category.html",
    "title": "Enum Category | OnePassword.NET",
    "keywords": "Enum Category Namespace OnePassword.Items Assembly OnePassword.NET.dll Represents the category of a 1Password item. [JsonConverter(typeof(JsonStringEnumConverterEx<Category>))] public enum Category Fields ApiCredential = 0 API Credential BankAccount = 1 Bank Account CreditCard = 2 Credit Card Custom = 3 Custom Database = 4 Database Document = 5 Document DriverLicense = 6 Driver's License EmailAccount = 7 Email Account Identity = 8 Identity Login = 9 Login MedicalRecord = 10 Medical Record Membership = 11 Membership OutdoorLicense = 12 Outdoor License Passport = 13 Passport Password = 14 Password RewardProgram = 15 Reward Program SecureNote = 16 Secure Note Server = 17 Server SocialSecurityNumber = 18 Social Security Number SoftwareLicense = 19 Software License SshKey = 20 SSH Key Unknown = 21 The category is unknown. WirelessRouter = 22 Wireless Router"
  },
  "reference/OnePassword.Items.Field.html": {
    "href": "reference/OnePassword.Items.Field.html",
    "title": "Class Field | OnePassword.NET",
    "keywords": "Class Field Namespace OnePassword.Items Assembly OnePassword.NET.dll Represents a 1Password item field. public sealed class Field Inheritance object Field Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors Field() Initializes a new instance of OnePassword.Items.Field. public Field() Field(string, FieldType, string, Section?) Initializes a new instance of OnePassword.Items.Field with the specified label, type, value, and optionally, section. public Field(string label, FieldType type, string value, Section? section = null) Parameters label string The field label. type FieldType The field type. value string The field value. section Section? The field section. Properties Id The field ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string Label The field label. [JsonInclude] [JsonPropertyName(\"label\")] public string Label { get; } Property Value string PasswordDetails Password details when the field is a password type field. [JsonInclude] [JsonPropertyName(\"password_details\")] public PasswordDetails? PasswordDetails { get; } Property Value PasswordDetails? Purpose The field purpose. [JsonInclude] [JsonPropertyName(\"purpose\")] public FieldPurpose? Purpose { get; } Property Value FieldPurpose? Reference The reference path to the field. [JsonInclude] [JsonPropertyName(\"reference\")] public string? Reference { get; } Property Value string? Section The field section. [JsonInclude] [JsonPropertyName(\"section\")] public Section? Section { get; } Property Value Section? Type The field type. [JsonInclude] [JsonPropertyName(\"type\")] public FieldType Type { get; set; } Property Value FieldType Value The field value. [JsonInclude] [JsonPropertyName(\"value\")] public string Value { get; set; } Property Value string"
  },
  "reference/OnePassword.Items.FieldPurpose.html": {
    "href": "reference/OnePassword.Items.FieldPurpose.html",
    "title": "Enum FieldPurpose | OnePassword.NET",
    "keywords": "Enum FieldPurpose Namespace OnePassword.Items Assembly OnePassword.NET.dll Represents the purpose of a 1Password item field. [JsonConverter(typeof(JsonStringEnumConverterEx<FieldPurpose>))] public enum FieldPurpose Fields Notes = 0 Notes Password = 1 Password Unknown = 2 The field purpose is unknown. Username = 3 Username"
  },
  "reference/OnePassword.Items.FieldType.html": {
    "href": "reference/OnePassword.Items.FieldType.html",
    "title": "Enum FieldType | OnePassword.NET",
    "keywords": "Enum FieldType Namespace OnePassword.Items Assembly OnePassword.NET.dll Represents the type of 1Password field. [JsonConverter(typeof(JsonStringEnumConverterEx<FieldType>))] public enum FieldType Fields Address = 0 Address Concealed = 1 Concealed CreditCardNumber = 2 Credit Card Number CreditCardType = 3 Credit Card Type Date = 4 Date Email = 5 Email File = 6 File Gender = 7 Gender Menu = 8 Menu MonthYear = 9 Month Year Otp = 10 OTP Phone = 11 Phone Reference = 12 Reference SshKey = 13 SSH Key String = 14 String Unknown = 15 The field type is unknown. Url = 16 Url"
  },
  "reference/OnePassword.Items.IItem.html": {
    "href": "reference/OnePassword.Items.IItem.html",
    "title": "Interface IItem | OnePassword.NET",
    "keywords": "Interface IItem Namespace OnePassword.Items Assembly OnePassword.NET.dll Defines a 1Password item. public interface IItem Properties Id The item ID. string Id { get; } Property Value string"
  },
  "reference/OnePassword.Items.Item.html": {
    "href": "reference/OnePassword.Items.Item.html",
    "title": "Class Item | OnePassword.NET",
    "keywords": "Class Item Namespace OnePassword.Items Assembly OnePassword.NET.dll Represents a 1Password item. public sealed class Item : ItemBase, IItem Inheritance object ItemBase Item Implements IItem Inherited Members ItemBase.Title ItemBase.CategoryId ItemBase.Category ItemBase.Sections ItemBase.Fields ItemBase.Urls ItemBase.Tags object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Created The date and time when the item was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTimeOffset? Created { get; } Property Value DateTimeOffset? Id The item ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string LastEditedUserId The ID of the user that last edited the item. [JsonInclude] [JsonPropertyName(\"last_edited_by\")] public string? LastEditedUserId { get; } Property Value string? Updated The date and time when the item was last updated. [JsonInclude] [JsonPropertyName(\"updated_at\")] public DateTimeOffset? Updated { get; } Property Value DateTimeOffset? Vault The item vault. [JsonInclude] [JsonPropertyName(\"vault\")] public Vault? Vault { get; } Property Value Vault?"
  },
  "reference/OnePassword.Items.ItemBase.html": {
    "href": "reference/OnePassword.Items.ItemBase.html",
    "title": "Class ItemBase | OnePassword.NET",
    "keywords": "Class ItemBase Namespace OnePassword.Items Assembly OnePassword.NET.dll Common base class that represents a 1Password item. public abstract class ItemBase Inheritance object ItemBase Derived Item Template Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties Category The item category. [JsonInclude] [JsonPropertyName(\"category\")] public Category Category { get; } Property Value Category CategoryId The item categoryId. [JsonInclude] [JsonPropertyName(\"category_id\")] public string CategoryId { get; set; } Property Value string Fields The item fields. [JsonInclude] [JsonPropertyName(\"fields\")] public TrackedList<Field> Fields { get; } Property Value TrackedList<Field> Sections The item sections. [JsonInclude] [JsonPropertyName(\"sections\")] public TrackedList<Section> Sections { get; } Property Value TrackedList<Section> Tags The tags associated with the item. [JsonInclude] [JsonPropertyName(\"tags\")] public TrackedList<string> Tags { get; } Property Value TrackedList<string> Title The item title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; set; } Property Value string Urls The item URLs. [JsonInclude] [JsonPropertyName(\"urls\")] public TrackedList<Url> Urls { get; } Property Value TrackedList<Url>"
  },
  "reference/OnePassword.Items.PasswordDetails.html": {
    "href": "reference/OnePassword.Items.PasswordDetails.html",
    "title": "Class PasswordDetails | OnePassword.NET",
    "keywords": "Class PasswordDetails Namespace OnePassword.Items Assembly OnePassword.NET.dll Represents details of a password. public sealed class PasswordDetails Inheritance object PasswordDetails Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Strength The password strength. [JsonInclude] [JsonPropertyName(\"strength\")] public string Strength { get; } Property Value string"
  },
  "reference/OnePassword.Items.Section.html": {
    "href": "reference/OnePassword.Items.Section.html",
    "title": "Class Section | OnePassword.NET",
    "keywords": "Class Section Namespace OnePassword.Items Assembly OnePassword.NET.dll Represents a 1Password item section. public sealed class Section Inheritance object Section Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors Section() Initializes a new instance of OnePassword.Items.Section. public Section() Section(string) Initializes a new instance of OnePassword.Items.Section with the specified label. public Section(string label) Parameters label string The section label. Properties Id The section ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string Label The section label. [JsonInclude] [JsonPropertyName(\"label\")] public string Label { get; } Property Value string"
  },
  "reference/OnePassword.Items.Url.html": {
    "href": "reference/OnePassword.Items.Url.html",
    "title": "Class Url | OnePassword.NET",
    "keywords": "Class Url Namespace OnePassword.Items Assembly OnePassword.NET.dll Represents a 1Password item URL. public sealed class Url Inheritance object Url Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Href The URL HREF. [JsonInclude] [JsonPropertyName(\"href\")] public string Href { get; set; } Property Value string Label The URL label. [JsonInclude] [JsonPropertyName(\"label\")] public string Label { get; } Property Value string Primary Returns true when the URL is the primary URL for the item, false otherwise. [JsonInclude] [JsonPropertyName(\"primary\")] public bool Primary { get; } Property Value bool"
  },
  "reference/OnePassword.Items.html": {
    "href": "reference/OnePassword.Items.html",
    "title": "Namespace OnePassword.Items | OnePassword.NET",
    "keywords": "Namespace OnePassword.Items Classes Field Represents a 1Password item field. Item Represents a 1Password item. ItemBase Common base class that represents a 1Password item. PasswordDetails Represents details of a password. Section Represents a 1Password item section. Url Represents a 1Password item URL. Interfaces IItem Defines a 1Password item. Enums Category Represents the category of a 1Password item. FieldPurpose Represents the purpose of a 1Password item field. FieldType Represents the type of 1Password field."
  },
  "reference/OnePassword.OnePasswordManager.html": {
    "href": "reference/OnePassword.OnePasswordManager.html",
    "title": "Class OnePasswordManager | OnePassword.NET",
    "keywords": "Class OnePasswordManager Namespace OnePassword Assembly OnePassword.NET.dll Represents the 1Password CLI executable manager. public sealed class OnePasswordManager : IOnePasswordManager Inheritance object OnePasswordManager Implements IOnePasswordManager Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors OnePasswordManager(Action<OnePasswordManagerOptions>) Initializes a new instance of OnePassword.OnePasswordManager using the specified options. public OnePasswordManager(Action<OnePasswordManagerOptions> options) Parameters options Action<OnePasswordManagerOptions> The configuration options. Exceptions FileNotFoundException Thrown when the 1Password CLI executable cannot be found. OnePasswordManager(OnePasswordManagerOptions?) Initializes a new instance of OnePassword.OnePasswordManager using the specified options. public OnePasswordManager(OnePasswordManagerOptions? options = null) Parameters options OnePasswordManagerOptions? The configuration options. Exceptions FileNotFoundException Thrown when the 1Password CLI executable cannot be found. OnePasswordManager(string, string, bool, bool) Deprecated This constructor is deprecated. Please use the constructor overload with 'OnePasswordManagerOptions' as argument. Initializes a new instance of OnePassword.OnePasswordManager for the specified 1Password CLI executable. [Obsolete(\"This constructor is deprecated. Please use the constructor overload with 'OnePasswordManagerOptions' as argument.\")] public OnePasswordManager(string path = \"\", string executable = \"op.exe\", bool verbose = false, bool appIntegrated = false) Parameters path string The path to the 1Password CLI executable. executable string The name of the 1Password CLI executable. verbose bool When true, commands sent to the 1Password CLI executable are output to the console. appIntegrated bool Set to true when authentication is integrated into the 1Password desktop application (see documentation). When false, a password will be required to sign in. Exceptions FileNotFoundException Thrown when the 1Password CLI executable cannot be found. Properties Version The version of the 1Password CLI executable. public string Version { get; } Property Value string Methods AddAccount(string, string, string, string, string) Adds an account. public void AddAccount(string address, string email, string secretKey, string password, string shorthand = \"\") Parameters address string The account address. email string The account email. secretKey string The account secret key. password string The account password. shorthand string The account shorthand. Exceptions ArgumentException Thrown when there is an invalid argument. ArchiveDocument(IDocument, IVault) Archives a document. public void ArchiveDocument(IDocument document, IVault vault) Parameters document IDocument The document to archive. vault IVault The vault that contains the document to archive. Exceptions ArgumentException Thrown when there is an invalid argument. ArchiveDocument(string, string) Archives a document. public void ArchiveDocument(string documentId, string vaultId) Parameters documentId string The ID of the document to archive. vaultId string The ID of the vault that contains the document to archive. Exceptions ArgumentException Thrown when there is an invalid argument. ArchiveItem(IItem, IVault) Archives an item. public void ArchiveItem(IItem item, IVault vault) Parameters item IItem The item to archive. vault IVault The vault that contains the item to archive. Exceptions ArgumentException Thrown when there is an invalid argument. ArchiveItem(string, string) Archives an item. public void ArchiveItem(string itemId, string vaultId) Parameters itemId string The ID of the item to archive. vaultId string The ID of the vault that contains the item to archive. Exceptions ArgumentException Thrown when there is an invalid argument. ConfirmAllUsers() Confirms all users. public void ConfirmAllUsers() ConfirmUser(IUser) Confirms a user. public void ConfirmUser(IUser user) Parameters user IUser The user to confirm. Exceptions ArgumentException Thrown when there is an invalid argument. ConfirmUser(string) Confirms a user. public void ConfirmUser(string userId) Parameters userId string The ID of the user to confirm. Exceptions ArgumentException Thrown when there is an invalid argument. CreateDocument(IVault, string, string?, string?, IReadOnlyCollection<string>?) Creates a document. public Document CreateDocument(IVault vault, string filePath, string? fileName = null, string? title = null, IReadOnlyCollection<string>? tags = null) Parameters vault IVault The vault in which to create the document. filePath string The path to the file to upload. fileName string? The document's filename. title string? The document's title. tags IReadOnlyCollection<string>? The document's tags. Returns Document The created document. Exceptions ArgumentException Thrown when there is an invalid argument. CreateDocument(string, string, string?, string?, IReadOnlyCollection<string>?) Creates a document. public Document CreateDocument(string vaultId, string filePath, string? fileName = null, string? title = null, IReadOnlyCollection<string>? tags = null) Parameters vaultId string The ID of the vault in which to create the document. filePath string The path to the file to upload. fileName string? The document's filename. title string? The document's title. tags IReadOnlyCollection<string>? The document's tags. Returns Document The created document. Exceptions ArgumentException Thrown when there is an invalid argument. CreateGroup(string, string?) Create a group. public GroupDetails CreateGroup(string name, string? description = null) Parameters name string The group name. description string? The group description. Returns GroupDetails The created group. Exceptions ArgumentException Thrown when there is an invalid argument. CreateItem(Template, IVault) Creates an item. public Item CreateItem(Template template, IVault vault) Parameters template Template The template from which to create the item. vault IVault The vault in which to create the item. Returns Item The created item. Exceptions ArgumentException Thrown when there is an invalid argument. CreateItem(Template, string) Creates an item. public Item CreateItem(Template template, string vaultId) Parameters template Template The template from which to create the item. vaultId string The ID of the vault in which to create the item. Returns Item The created item. Exceptions ArgumentException Thrown when there is an invalid argument. CreateVault(string, string?, VaultIcon, bool?) Creates a vault. public VaultDetails CreateVault(string name, string? description = null, VaultIcon icon = VaultIcon.Default, bool? allowAdminsToManage = null) Parameters name string The vault name. description string? The vault description. icon VaultIcon The vault icon. allowAdminsToManage bool? When true, allows administrators to manage the vault. Returns VaultDetails The created vault. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteDocument(IDocument, IVault) Deletes a document. public void DeleteDocument(IDocument document, IVault vault) Parameters document IDocument The document to delete. vault IVault The vault that contains the document to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteDocument(string, string) Deletes a document. public void DeleteDocument(string documentId, string vaultId) Parameters documentId string The ID of the document to delete. vaultId string The ID of the vault that contains the document to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteGroup(IGroup) Deletes a group. public void DeleteGroup(IGroup group) Parameters group IGroup The group to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteGroup(string) Deletes a group. public void DeleteGroup(string groupId) Parameters groupId string The ID of the group to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteItem(IItem, IVault) Deletes an item. public void DeleteItem(IItem item, IVault vault) Parameters item IItem The item to delete. vault IVault The vault that contains the item to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteItem(string, string) Deletes an item. public void DeleteItem(string itemId, string vaultId) Parameters itemId string The ID of the item to delete. vaultId string The ID of the vault that contains the item to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteUser(IUser) Deletes a user. public void DeleteUser(IUser user) Parameters user IUser The user to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteUser(string) Deletes a user. public void DeleteUser(string userId) Parameters userId string The ID of the user to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteVault(IVault) Deletes a vault. public void DeleteVault(IVault vault) Parameters vault IVault The vault to delete. Exceptions ArgumentException Thrown when there is an invalid argument. DeleteVault(string) Deletes a vault. public void DeleteVault(string vaultId) Parameters vaultId string The ID of the vault to delete. Exceptions ArgumentException Thrown when there is an invalid argument. EditGroup(IGroup, string?, string?) Edits a group. public void EditGroup(IGroup group, string? name = null, string? description = null) Parameters group IGroup The group to edit. name string? The group's new name. description string? The group's new description. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditGroup(string, string?, string?) Edits a group. public void EditGroup(string groupId, string? name = null, string? description = null) Parameters groupId string The ID of the group to edit. name string? The group's new name. description string? The group's new description. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditItem(Item, IVault) Edits an item. public Item EditItem(Item item, IVault vault) Parameters item Item The item to edit. vault IVault The vault that contains the item to edit. Returns Item The edited item. Exceptions ArgumentException Thrown when there is an invalid argument. EditItem(Item, string) Edits an item. public Item EditItem(Item item, string vaultId) Parameters item Item The item to edit. vaultId string The ID of the vault that contains the item to edit. Returns Item The edited item. Exceptions ArgumentException Thrown when there is an invalid argument. EditUser(IUser, string?, bool?) Edits a user. public void EditUser(IUser user, string? name = null, bool? travelMode = null) Parameters user IUser The user to edit. name string? The user's new name. travelMode bool? When true, enables travel mode on the vault. If enabled, false disables it. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditUser(string, string?, bool?) Edits a user. public void EditUser(string userId, string? name = null, bool? travelMode = null) Parameters userId string The ID of the user to edit. name string? The user's new name. travelMode bool? When true, enables travel mode on the vault. If enabled, false disables it. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditVault(IVault, string?, string?, VaultIcon, bool?) Edits a vault. public void EditVault(IVault vault, string? name = null, string? description = null, VaultIcon icon = VaultIcon.Default, bool? travelMode = null) Parameters vault IVault The vault to edit. name string? The vault's new name. description string? The vault's new description. icon VaultIcon The vault's new icon. travelMode bool? When true, enables travel mode on the vault. If enabled, false disables it. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. EditVault(string, string?, string?, VaultIcon, bool?) Edits a vault. public void EditVault(string vaultId, string? name = null, string? description = null, VaultIcon icon = VaultIcon.Default, bool? travelMode = null) Parameters vaultId string The ID of the vault to edit. name string? The vault's new name. description string? The vault's new description. icon VaultIcon The vault's new icon. travelMode bool? When true, enables travel mode on the vault. If enabled, false disables it. Exceptions ArgumentException Thrown when there is an invalid argument. InvalidOperationException Thrown when there is nothing to edit. ForgetAccount(bool) Forgets the account. public ImmutableList<string> ForgetAccount(bool all = false) Parameters all bool When true, forgets all accounts. Returns ImmutableList<string> The list of accounts that were forgotten. GetAccount(string) Gets the account details. public AccountDetails GetAccount(string account = \"\") Parameters account string The account to retrieve. Returns AccountDetails The account details. GetAccounts() Gets the accounts. public ImmutableList<Account> GetAccounts() Returns ImmutableList<Account> The list of accounts. GetDocument(IDocument, IVault, string, string?) Gets a document. public void GetDocument(IDocument document, IVault vault, string filePath, string? fileMode = null) Parameters document IDocument The document to retrieve. vault IVault The vault that contains the document to retrieve. filePath string The file path to save the document to. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. GetDocument(string, string, string, string?) Gets a document. public void GetDocument(string documentId, string vaultId, string filePath, string? fileMode = null) Parameters documentId string The ID of the document to retrieve. vaultId string The ID of the vault that contains the document to retrieve. filePath string The file path to save the document to. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. GetDocuments(IVault) Gets a vault's documents. public ImmutableList<DocumentDetails> GetDocuments(IVault vault) Parameters vault IVault The vault that contains the documents to retrieve. Returns ImmutableList<DocumentDetails> The vault's documents. Exceptions ArgumentException Thrown when there is an invalid argument. GetDocuments(string) Gets a vault's documents. public ImmutableList<DocumentDetails> GetDocuments(string vaultId) Parameters vaultId string The ID of the vault that contains the documents to retrieve. Returns ImmutableList<DocumentDetails> The vault's documents. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroup(IGroup) Gets the group's details. public GroupDetails GetGroup(IGroup group) Parameters group IGroup The group to retrieve. Returns GroupDetails The group details. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroup(string) Gets the group's details. public GroupDetails GetGroup(string groupId) Parameters groupId string The ID of the group to retrieve. Returns GroupDetails The group details. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroupUsers(string) Gets a group's users. public ImmutableList<GroupUser> GetGroupUsers(string groupId) Parameters groupId string The ID of the group for which to retrieve users. Returns ImmutableList<GroupUser> The group's users. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroupVaults(string) Gets a group's vaults. public ImmutableList<Vault> GetGroupVaults(string groupId) Parameters groupId string The ID of the group to retrieve vaults for. Returns ImmutableList<Vault> The group's vaults. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroups() Gets the groups. public ImmutableList<Group> GetGroups() Returns ImmutableList<Group> The list of groups. GetGroups(IVault) Gets a vault's groups. public ImmutableList<VaultGroup> GetGroups(IVault vault) Parameters vault IVault The vault for which to retrieve groups. Returns ImmutableList<VaultGroup> The vault's groups. Exceptions ArgumentException Thrown when there is an invalid argument. GetGroups(IUser) Gets a user's groups. public ImmutableList<UserGroup> GetGroups(IUser user) Parameters user IUser The user for which to retrieve groups. Returns ImmutableList<UserGroup> The user's groups. Exceptions ArgumentException Thrown when there is an invalid argument. GetItem(IItem, IVault) Gets an item. public Item GetItem(IItem item, IVault vault) Parameters item IItem The item to retrieve. vault IVault The vault that contains the item to retrieve. Returns Item The item details. Exceptions ArgumentException Thrown when there is an invalid argument. GetItem(string, string) Gets an item. public Item GetItem(string itemId, string vaultId) Parameters itemId string The ID of the item to retrieve. vaultId string The ID of the vault that contains the item to retrieve. Returns Item The item details. Exceptions ArgumentException Thrown when there is an invalid argument. GetItems(IVault) Gets a vault's items. public ImmutableList<Item> GetItems(IVault vault) Parameters vault IVault The vault that contains the items to retrieve. Returns ImmutableList<Item> The vault's items. Exceptions ArgumentException Thrown when there is an invalid argument. GetItems(string) Gets a vault's items. public ImmutableList<Item> GetItems(string vaultId) Parameters vaultId string The ID of the vault that contains the items to retrieve. Returns ImmutableList<Item> The vault's items. Exceptions ArgumentException Thrown when there is an invalid argument. GetSecret(string) Gets a secret. public string GetSecret(string reference) Parameters reference string The reference to the secret. Returns string Returns the secret. Exceptions ArgumentException Thrown when there is an invalid argument. GetTemplate(ITemplate) Gets a template. public Template GetTemplate(ITemplate template) Parameters template ITemplate The template to retrieve. Returns Template The template details. Exceptions ArgumentException Thrown when there is an invalid argument. GetTemplate(string) Gets a template. public Template GetTemplate(string name) Parameters name string The template name to retrieve. Returns Template The template details. Exceptions ArgumentException Thrown when there is an invalid argument. GetTemplate(Category) Gets a template. public Template GetTemplate(Category category) Parameters category Category The template category. Returns Template The template details. Exceptions ArgumentException Thrown when there is an invalid argument. GetTemplates() Gets the templates. public ImmutableList<TemplateInfo> GetTemplates() Returns ImmutableList<TemplateInfo> The list of templates. GetUser(IUser) Gets the user's details. public UserDetails GetUser(IUser user) Parameters user IUser The user to retrieve. Returns UserDetails The user details. Exceptions ArgumentException Thrown when there is an invalid argument. GetUser(string) Gets the user's details. public UserDetails GetUser(string userId) Parameters userId string The ID of the user to retrieve. Returns UserDetails The user details. Exceptions ArgumentException Thrown when there is an invalid argument. GetUserGroups(string) Gets a user's groups. public ImmutableList<UserGroup> GetUserGroups(string userId) Parameters userId string The ID of the user for which to retrieve groups. Returns ImmutableList<UserGroup> The user's groups. Exceptions ArgumentException Thrown when there is an invalid argument. GetUserVaults(string) Gets a user's vaults. public ImmutableList<Vault> GetUserVaults(string userId) Parameters userId string The ID of the user to retrieve vaults for. Returns ImmutableList<Vault> The user's vaults. Exceptions ArgumentException Thrown when there is an invalid argument. GetUsers() Gets the users. public ImmutableList<User> GetUsers() Returns ImmutableList<User> The list of users. GetUsers(IGroup) Gets a group's users. public ImmutableList<GroupUser> GetUsers(IGroup group) Parameters group IGroup The group for which to retrieve users. Returns ImmutableList<GroupUser> The group's users. Exceptions ArgumentException Thrown when there is an invalid argument. GetUsers(IVault) Gets a vault's users. public ImmutableList<VaultUser> GetUsers(IVault vault) Parameters vault IVault The vault for which to retrieve users. Returns ImmutableList<VaultUser> The vault's users. Exceptions ArgumentException Thrown when there is an invalid argument. GetVault(IVault) Gets a vault. public VaultDetails GetVault(IVault vault) Parameters vault IVault The vault to retrieve. Returns VaultDetails The vault details. Exceptions ArgumentException Thrown when there is an invalid argument. GetVault(string) Gets a vault. public VaultDetails GetVault(string vaultId) Parameters vaultId string The ID of the vault to retrieve. Returns VaultDetails The vault details. Exceptions ArgumentException Thrown when there is an invalid argument. GetVaultGroups(string) Gets a vault's groups. public ImmutableList<VaultGroup> GetVaultGroups(string vaultId) Parameters vaultId string The ID of the vault for which to retrieve groups. Returns ImmutableList<VaultGroup> The vault's groups. Exceptions ArgumentException Thrown when there is an invalid argument. GetVaultUsers(string) Gets a vault's users. public ImmutableList<VaultUser> GetVaultUsers(string vaultId) Parameters vaultId string The ID of the vault for which to retrieve users. Returns ImmutableList<VaultUser> The vault's users. Exceptions ArgumentException Thrown when there is an invalid argument. GetVaults() Gets the vaults. public ImmutableList<Vault> GetVaults() Returns ImmutableList<Vault> The list of vaults. GetVaults(IGroup) Gets a group's vaults. public ImmutableList<Vault> GetVaults(IGroup group) Parameters group IGroup The group to retrieve vaults for. Returns ImmutableList<Vault> The group's vaults. Exceptions ArgumentException Thrown when there is an invalid argument. GetVaults(IUser) Gets a user's vaults. public ImmutableList<Vault> GetVaults(IUser user) Parameters user IUser The user to retrieve vaults for. Returns ImmutableList<Vault> The user's vaults. Exceptions ArgumentException Thrown when there is an invalid argument. GrantAccess(IGroup, IUser, UserRole) Grants a user access to a group. public void GrantAccess(IGroup group, IUser user, UserRole userRole = UserRole.Member) Parameters group IGroup The group to grant access from. user IUser The user to grant access to. userRole UserRole The user role to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantAccess(string, string, UserRole) Grants a user access to a group. public void GrantAccess(string groupId, string userId, UserRole userRole = UserRole.Member) Parameters groupId string The ID of the group to grant access from. userId string The ID of the user to grant access to. userRole UserRole The user role to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantGroupPermissions(string, string, IReadOnlyCollection<VaultPermission>) Grants a group permissions to a vault. public void GrantGroupPermissions(string vaultId, string groupId, IReadOnlyCollection<VaultPermission> permissions) Parameters vaultId string The ID of the vault to grant permissions from. groupId string The ID of the group to grant permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantPermissions(IVault, IGroup, IReadOnlyCollection<VaultPermission>) Grants a group permissions to a vault. public void GrantPermissions(IVault vault, IGroup group, IReadOnlyCollection<VaultPermission> permissions) Parameters vault IVault The vault to grant permissions from. group IGroup The group to grant permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantPermissions(IVault, IUser, IReadOnlyCollection<VaultPermission>) Grants a user permissions to a vault. public void GrantPermissions(IVault vault, IUser user, IReadOnlyCollection<VaultPermission> permissions) Parameters vault IVault The vault to grant permissions from. user IUser The user to grant permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to grant. Exceptions ArgumentException Thrown when there is an invalid argument. GrantUserPermissions(string, string, IReadOnlyCollection<VaultPermission>) Grants a user permissions to a vault. public void GrantUserPermissions(string vaultId, string userId, IReadOnlyCollection<VaultPermission> permissions) Parameters vaultId string The ID of the vault to grant permissions from. userId string The ID of the user to grant permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to grant. Exceptions ArgumentException Thrown when there is an invalid argument. ProvisionUser(string, string, Language) Provisions a user. public UserDetails ProvisionUser(string name, string emailAddress, Language language = Language.Default) Parameters name string The user name. emailAddress string The user email address. language Language The user language. Returns UserDetails The provisioned user. Exceptions ArgumentException Thrown when there is an invalid argument. ReactivateUser(IUser) Reactivates a user. public void ReactivateUser(IUser user) Parameters user IUser The user to reactivate. Exceptions ArgumentException Thrown when there is an invalid argument. ReactivateUser(string) Reactivates a user. public void ReactivateUser(string userId) Parameters userId string The ID of the user to reactivate. Exceptions ArgumentException Thrown when there is an invalid argument. ReplaceDocument(IDocument, IVault, string, string?, string?, IReadOnlyCollection<string>?) Replaces a document. public void ReplaceDocument(IDocument document, IVault vault, string filePath, string? fileName = null, string? title = null, IReadOnlyCollection<string>? tags = null) Parameters document IDocument The document to replace. vault IVault The vault that contains the document to replace. filePath string The path to the file to upload. fileName string? The document's filename. title string? The document's title. tags IReadOnlyCollection<string>? The document's tags. Exceptions ArgumentException Thrown when there is an invalid argument. ReplaceDocument(string, string, string, string?, string?, IReadOnlyCollection<string>?) Replaces a document. public void ReplaceDocument(string documentId, string vaultId, string filePath, string? fileName = null, string? title = null, IReadOnlyCollection<string>? tags = null) Parameters documentId string The ID of the document to replace. vaultId string The ID of the vault that contains the document to replace. filePath string The path to the file to upload. fileName string? The document's filename. title string? The document's title. tags IReadOnlyCollection<string>? The document's tags. Exceptions ArgumentException Thrown when there is an invalid argument. RevokeAccess(IGroup, IUser) Revokes a user's access to a group. public void RevokeAccess(IGroup group, IUser user) Parameters group IGroup The group to revoke access from. user IUser The user to revoke access to. Exceptions ArgumentException Thrown when there is an invalid argument. RevokeAccess(string, string) Revokes a user's access to a group. public void RevokeAccess(string groupId, string userId) Parameters groupId string The ID of the group to revoke access from. userId string The ID of the user to revoke access to. Exceptions ArgumentException Thrown when there is an invalid argument. RevokeGroupPermissions(string, string, IReadOnlyCollection<VaultPermission>) Revokes a group's permissions to a vault. public void RevokeGroupPermissions(string vaultId, string groupId, IReadOnlyCollection<VaultPermission> permissions) Parameters vaultId string The ID of the vault to revoke permissions from. groupId string The ID of the group to revoke permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to revoke. Exceptions ArgumentException Thrown when there is an invalid argument. RevokePermissions(IVault, IGroup, IReadOnlyCollection<VaultPermission>) Revokes a group's permissions to a vault. public void RevokePermissions(IVault vault, IGroup group, IReadOnlyCollection<VaultPermission> permissions) Parameters vault IVault The vault to revoke permissions from. group IGroup The group to revoke permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to revoke. Exceptions ArgumentException Thrown when there is an invalid argument. RevokePermissions(IVault, IUser, IReadOnlyCollection<VaultPermission>) Revokes a user's permissions to a vault. public void RevokePermissions(IVault vault, IUser user, IReadOnlyCollection<VaultPermission> permissions) Parameters vault IVault The vault to revoke permissions from. user IUser The user to revoke permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to revoke. Exceptions ArgumentException Thrown when there is an invalid argument. RevokeUserPermissions(string, string, IReadOnlyCollection<VaultPermission>) Revokes a user's permissions to a vault. public void RevokeUserPermissions(string vaultId, string userId, IReadOnlyCollection<VaultPermission> permissions) Parameters vaultId string The ID of the vault to revoke permissions from. userId string The ID of the user to revoke permissions to. permissions IReadOnlyCollection<VaultPermission> The permissions to revoke. Exceptions ArgumentException Thrown when there is an invalid argument. SaveSecret(string, string, string?) Saves a secret. public void SaveSecret(string reference, string filePath, string? fileMode = null) Parameters reference string The reference to the secret. filePath string The file path to save the document to. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForDocument(IDocument, string, IVault?, bool?, string?) Searches for a document. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. public void SearchForDocument(IDocument document, string filePath, IVault? vault = null, bool? includeArchive = null, string? fileMode = null) Parameters document IDocument The document to search for. filePath string The file path to save the document to. vault IVault? The vault that contains the document to search for. includeArchive bool? When true, includes archived documents in the search. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForDocument(string, string, string?, bool?, string?) Searches for a document. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. public void SearchForDocument(string documentId, string filePath, string? vaultId = null, bool? includeArchive = null, string? fileMode = null) Parameters documentId string The ID of the document to search for. filePath string The file path to save the document to. vaultId string? The ID of the vault that contains the document to search for. includeArchive bool? When true, includes archived documents in the search. fileMode string? The file mode. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForDocuments(IVault, bool?) Searches for an document. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. public ImmutableList<DocumentDetails> SearchForDocuments(IVault vault, bool? includeArchive = null) Parameters vault IVault The vault that contains the documents to search for. includeArchive bool? When true, includes archived documents in the search. Returns ImmutableList<DocumentDetails> The documents that match the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForDocuments(string?, bool?) Searches for an document. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. public ImmutableList<DocumentDetails> SearchForDocuments(string? vaultId = null, bool? includeArchive = null) Parameters vaultId string? The ID of the vault that contains the documents to search for. includeArchive bool? When true, includes archived documents in the search. Returns ImmutableList<DocumentDetails> The documents that match the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForItem(IItem, IVault?, bool?) Searches for an item. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. public Item SearchForItem(IItem item, IVault? vault = null, bool? includeArchive = null) Parameters item IItem The item to search for. vault IVault? The vault that contains the item to search for. includeArchive bool? When true, includes archived items in the search. Returns Item The item that matches the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForItem(string, string?, bool?) Searches for an item. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. public Item SearchForItem(string itemId, string? vaultId = null, bool? includeArchive = null) Parameters itemId string The ID of the item to search for. vaultId string? The ID of the vault that contains the item to search for. includeArchive bool? When true, includes archived items in the search. Returns Item The item that matches the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForItems(IVault, bool?, bool?, IReadOnlyCollection<Category>?, IReadOnlyCollection<string>?) Searches for an item. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. public ImmutableList<Item> SearchForItems(IVault vault, bool? includeArchive = null, bool? favorite = null, IReadOnlyCollection<Category>? categories = null, IReadOnlyCollection<string>? tags = null) Parameters vault IVault The vault that contains the items to search for. includeArchive bool? When true, includes archived items in the search. favorite bool? When true, searches for favorites. categories IReadOnlyCollection<Category>? The categories to search for. tags IReadOnlyCollection<string>? The tags to search for. Returns ImmutableList<Item> The items that match the search. Exceptions ArgumentException Thrown when there is an invalid argument. SearchForItems(string?, bool?, bool?, IReadOnlyCollection<Category>?, IReadOnlyCollection<string>?) Searches for an item. WARNING: If a vault is not specified, the 1Password CLI may generate a large amount of internal calls which may result in throttling. public ImmutableList<Item> SearchForItems(string? vaultId = null, bool? includeArchive = null, bool? favorite = null, IReadOnlyCollection<Category>? categories = null, IReadOnlyCollection<string>? tags = null) Parameters vaultId string? The ID of the vault that contains the items to search for. includeArchive bool? When true, includes archived items in the search. favorite bool? When true, searches for favorites. categories IReadOnlyCollection<Category>? The categories to search for. tags IReadOnlyCollection<string>? The tags to search for. Returns ImmutableList<Item> The items that match the search. Exceptions ArgumentException Thrown when there is an invalid argument. SignIn(string?) Signs in to the account. public void SignIn(string? password = null) Parameters password string? The account password to use when manually signing in. Exceptions ArgumentException Thrown when there is an invalid argument. SignOut(bool) Signs out of the account. public void SignOut(bool all = false) Parameters all bool When true, signs out of all accounts. SuspendUser(IUser, int?) Suspends a user. public void SuspendUser(IUser user, int? deauthorizeDevicesDelay = null) Parameters user IUser The user to suspend. deauthorizeDevicesDelay int? The number of seconds to delay deauthorizing devices after the user has been suspended. Exceptions ArgumentException Thrown when there is an invalid argument. SuspendUser(string, int?) Suspends a user. public void SuspendUser(string userId, int? deauthorizeDevicesDelay = null) Parameters userId string The ID of the user to suspend. deauthorizeDevicesDelay int? The number of seconds to delay deauthorizing devices after the user has been suspended. Exceptions ArgumentException Thrown when there is an invalid argument. Update() Updates the 1Password CLI executable. public bool Update() Returns bool Returns true when the 1Password CLI executable has been updated, false otherwise. UseAccount(string) Uses the account. public void UseAccount(string account) Parameters account string The account to use. Exceptions ArgumentException Thrown when there is an invalid argument."
  },
  "reference/OnePassword.OnePasswordManagerOptions.html": {
    "href": "reference/OnePassword.OnePasswordManagerOptions.html",
    "title": "Class OnePasswordManagerOptions | OnePassword.NET",
    "keywords": "Class OnePasswordManagerOptions Namespace OnePassword Assembly OnePassword.NET.dll Represents the 1Password manager options. public class OnePasswordManagerOptions : IOnePasswordManagerOptions Inheritance object OnePasswordManagerOptions Implements IOnePasswordManagerOptions Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties AppIntegrated Set to true when authentication is integrated into the 1Password desktop application (see documentation). When false , a password or service account token will be required to sign in. Defaults to false. public bool AppIntegrated { get; set; } Property Value bool Default The default options. public static OnePasswordManagerOptions Default { get; } Property Value OnePasswordManagerOptions Executable The name of the 1Password CLI executable. Defaults to 'op.exe'. public string Executable { get; set; } Property Value string Path The path to the 1Password CLI executable. Defaults to the current working directory. public string Path { get; set; } Property Value string ServiceAccountToken The service account token. If a token is provided, login will not be required. public string ServiceAccountToken { get; set; } Property Value string Verbose When true, commands sent to the 1Password CLI executable are output to the console. Defaults to false. public bool Verbose { get; set; } Property Value bool"
  },
  "reference/OnePassword.Templates.ITemplate.html": {
    "href": "reference/OnePassword.Templates.ITemplate.html",
    "title": "Interface ITemplate | OnePassword.NET",
    "keywords": "Interface ITemplate Namespace OnePassword.Templates Assembly OnePassword.NET.dll Defines a 1Password template. public interface ITemplate : IEquatable<ITemplate>, IComparable<ITemplate>, IComparable Implements IEquatable<ITemplate> IComparable<ITemplate> IComparable Properties Name The template name. string Name { get; } Property Value string"
  },
  "reference/OnePassword.Templates.Template.html": {
    "href": "reference/OnePassword.Templates.Template.html",
    "title": "Class Template | OnePassword.NET",
    "keywords": "Class Template Namespace OnePassword.Templates Assembly OnePassword.NET.dll Represents a 1Password template. public sealed class Template : ItemBase, ITemplate, IEquatable<ITemplate>, IComparable<ITemplate>, IComparable, ICloneable Inheritance object ItemBase Template Implements ITemplate IEquatable<ITemplate> IComparable<ITemplate> IComparable ICloneable Inherited Members ItemBase.Title ItemBase.CategoryId ItemBase.Category ItemBase.Sections ItemBase.Fields ItemBase.Urls ItemBase.Tags object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Name The template name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string Methods Clone() Clones the template. public Template Clone() Returns Template A cloned instance of the template. Exceptions SerializationException Thrown when there is an error serializing or deserializing the clone. CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object? obj) Parameters obj object? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. CompareTo(ITemplate?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(ITemplate? other) Parameters other ITemplate? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(ITemplate?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ITemplate? other) Parameters other ITemplate? An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(Template, ITemplate) Equality operator. public static bool operator ==(Template a, ITemplate b) Parameters a Template The OnePassword.Templates.Template object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is equal to b; otherwise, false. operator >(Template, ITemplate) Greater than operator. public static bool operator >(Template a, ITemplate b) Parameters a Template The OnePassword.Templates.Template object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is greater than b; otherwise, false. operator >=(Template, ITemplate) Greater than or equal to operator. public static bool operator >=(Template a, ITemplate b) Parameters a Template The OnePassword.Templates.Template object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is greater than or equal to b; otherwise, false. operator !=(Template, ITemplate) Inequality operator. public static bool operator !=(Template a, ITemplate b) Parameters a Template The OnePassword.Templates.Template object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is not equal to b; otherwise, false. operator <(Template, ITemplate) Less than operator. public static bool operator <(Template a, ITemplate b) Parameters a Template The OnePassword.Templates.Template object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is less than b; otherwise, false. operator <=(Template, ITemplate) Less than or equal to operator. public static bool operator <=(Template a, ITemplate b) Parameters a Template The OnePassword.Templates.Template object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is less than or equal to b; otherwise, false."
  },
  "reference/OnePassword.Templates.TemplateInfo.html": {
    "href": "reference/OnePassword.Templates.TemplateInfo.html",
    "title": "Class TemplateInfo | OnePassword.NET",
    "keywords": "Class TemplateInfo Namespace OnePassword.Templates Assembly OnePassword.NET.dll Describes a 1Password template. public sealed class TemplateInfo : ITemplate, IEquatable<ITemplate>, IComparable<ITemplate>, IComparable Inheritance object TemplateInfo Implements ITemplate IEquatable<ITemplate> IComparable<ITemplate> IComparable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Name The template name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string Methods CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object? obj) Parameters obj object? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. CompareTo(ITemplate?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(ITemplate? other) Parameters other ITemplate? An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(ITemplate?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ITemplate? other) Parameters other ITemplate? An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(TemplateInfo, ITemplate) Equality operator. public static bool operator ==(TemplateInfo a, ITemplate b) Parameters a TemplateInfo The OnePassword.Templates.TemplateInfo object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is equal to b; otherwise, false. operator >(TemplateInfo, ITemplate) Greater than operator. public static bool operator >(TemplateInfo a, ITemplate b) Parameters a TemplateInfo The OnePassword.Templates.TemplateInfo object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is greater than b; otherwise, false. operator >=(TemplateInfo, ITemplate) Greater than or equal to operator. public static bool operator >=(TemplateInfo a, ITemplate b) Parameters a TemplateInfo The OnePassword.Templates.TemplateInfo object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is greater than or equal to b; otherwise, false. operator !=(TemplateInfo, ITemplate) Inequality operator. public static bool operator !=(TemplateInfo a, ITemplate b) Parameters a TemplateInfo The OnePassword.Templates.TemplateInfo object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is not equal to b; otherwise, false. operator <(TemplateInfo, ITemplate) Less than operator. public static bool operator <(TemplateInfo a, ITemplate b) Parameters a TemplateInfo The OnePassword.Templates.TemplateInfo object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is less than b; otherwise, false. operator <=(TemplateInfo, ITemplate) Less than or equal to operator. public static bool operator <=(TemplateInfo a, ITemplate b) Parameters a TemplateInfo The OnePassword.Templates.TemplateInfo object. b ITemplate The OnePassword.Templates.ITemplate object to compare. Returns bool True if the a is less than or equal to b; otherwise, false."
  },
  "reference/OnePassword.Templates.html": {
    "href": "reference/OnePassword.Templates.html",
    "title": "Namespace OnePassword.Templates | OnePassword.NET",
    "keywords": "Namespace OnePassword.Templates Classes Template Represents a 1Password template. TemplateInfo Describes a 1Password template. Interfaces ITemplate Defines a 1Password template."
  },
  "reference/OnePassword.Users.GroupUser.html": {
    "href": "reference/OnePassword.Users.GroupUser.html",
    "title": "Class GroupUser | OnePassword.NET",
    "keywords": "Class GroupUser Namespace OnePassword.Users Assembly OnePassword.NET.dll Represents a 1Password user associated with group. public sealed class GroupUser : UserBase, IUser, IResult<IUser>, IEquatable<IResult<IUser>>, IComparable<IResult<IUser>>, IComparable Inheritance object ResultBase<IUser> UserBase GroupUser Implements IUser IResult<IUser> IEquatable<IResult<IUser>> IComparable<IResult<IUser>> IComparable Inherited Members UserBase.Email UserBase.Type UserBase.State ResultBase<IUser>.Id ResultBase<IUser>.Name ResultBase<IUser>.Deconstruct(out string, out string) ResultBase<IUser>.CompareTo(object?) ResultBase<IUser>.CompareTo(IResult<IUser>?) ResultBase<IUser>.Equals(IResult<IUser>?) ResultBase<IUser>.Equals(object?) ResultBase<IUser>.ToString() ResultBase<IUser>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Role The user's role in the group. [JsonInclude] [JsonPropertyName(\"role\")] public UserRole Role { get; } Property Value UserRole"
  },
  "reference/OnePassword.Users.IUser.html": {
    "href": "reference/OnePassword.Users.IUser.html",
    "title": "Interface IUser | OnePassword.NET",
    "keywords": "Interface IUser Namespace OnePassword.Users Assembly OnePassword.NET.dll Defines a 1Password user. public interface IUser : IResult<IUser>, IEquatable<IResult<IUser>>, IComparable<IResult<IUser>>, IComparable Implements IResult<IUser> IEquatable<IResult<IUser>> IComparable<IResult<IUser>> IComparable"
  },
  "reference/OnePassword.Users.User.html": {
    "href": "reference/OnePassword.Users.User.html",
    "title": "Class User | OnePassword.NET",
    "keywords": "Class User Namespace OnePassword.Users Assembly OnePassword.NET.dll Represents a 1Password user. public sealed class User : UserBase, IUser, IResult<IUser>, IEquatable<IResult<IUser>>, IComparable<IResult<IUser>>, IComparable Inheritance object ResultBase<IUser> UserBase User Implements IUser IResult<IUser> IEquatable<IResult<IUser>> IComparable<IResult<IUser>> IComparable Inherited Members UserBase.Email UserBase.Type UserBase.State ResultBase<IUser>.Id ResultBase<IUser>.Name ResultBase<IUser>.Deconstruct(out string, out string) ResultBase<IUser>.CompareTo(object?) ResultBase<IUser>.CompareTo(IResult<IUser>?) ResultBase<IUser>.Equals(IResult<IUser>?) ResultBase<IUser>.Equals(object?) ResultBase<IUser>.ToString() ResultBase<IUser>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "reference/OnePassword.Users.UserBase.html": {
    "href": "reference/OnePassword.Users.UserBase.html",
    "title": "Class UserBase | OnePassword.NET",
    "keywords": "Class UserBase Namespace OnePassword.Users Assembly OnePassword.NET.dll Common base class that represents a 1Password user. public abstract class UserBase : ResultBase<IUser>, IUser, IResult<IUser>, IEquatable<IResult<IUser>>, IComparable<IResult<IUser>>, IComparable Inheritance object ResultBase<IUser> UserBase Derived GroupUser User UserDetails VaultUser Implements IUser IResult<IUser> IEquatable<IResult<IUser>> IComparable<IResult<IUser>> IComparable Inherited Members ResultBase<IUser>.Id ResultBase<IUser>.Name ResultBase<IUser>.Deconstruct(out string, out string) ResultBase<IUser>.CompareTo(object?) ResultBase<IUser>.CompareTo(IResult<IUser>?) ResultBase<IUser>.Equals(IResult<IUser>?) ResultBase<IUser>.Equals(object?) ResultBase<IUser>.ToString() ResultBase<IUser>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties Email The user email. [JsonInclude] [JsonPropertyName(\"email\")] public string Email { get; } Property Value string State The state of the user. [JsonInclude] [JsonPropertyName(\"state\")] public State State { get; } Property Value State Type The user type. [JsonInclude] [JsonPropertyName(\"type\")] public UserType Type { get; } Property Value UserType"
  },
  "reference/OnePassword.Users.UserDetails.html": {
    "href": "reference/OnePassword.Users.UserDetails.html",
    "title": "Class UserDetails | OnePassword.NET",
    "keywords": "Class UserDetails Namespace OnePassword.Users Assembly OnePassword.NET.dll Represents a 1Password user with details. public sealed class UserDetails : UserBase, IUser, IResult<IUser>, IEquatable<IResult<IUser>>, IComparable<IResult<IUser>>, IComparable Inheritance object ResultBase<IUser> UserBase UserDetails Implements IUser IResult<IUser> IEquatable<IResult<IUser>> IComparable<IResult<IUser>> IComparable Inherited Members UserBase.Email UserBase.Type UserBase.State ResultBase<IUser>.Id ResultBase<IUser>.Name ResultBase<IUser>.Deconstruct(out string, out string) ResultBase<IUser>.CompareTo(object?) ResultBase<IUser>.CompareTo(IResult<IUser>?) ResultBase<IUser>.Equals(IResult<IUser>?) ResultBase<IUser>.Equals(object?) ResultBase<IUser>.ToString() ResultBase<IUser>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Created The date and time when the user was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTimeOffset Created { get; } Property Value DateTimeOffset LastAuthentication The date and time when the user was last authenticated. [JsonInclude] [JsonPropertyName(\"last_auth_at\")] public DateTimeOffset? LastAuthentication { get; } Property Value DateTimeOffset? Updated The date and time when the user was last updated. [JsonInclude] [JsonPropertyName(\"updated_at\")] public DateTimeOffset Updated { get; } Property Value DateTimeOffset"
  },
  "reference/OnePassword.Users.UserRole.html": {
    "href": "reference/OnePassword.Users.UserRole.html",
    "title": "Enum UserRole | OnePassword.NET",
    "keywords": "Enum UserRole Namespace OnePassword.Users Assembly OnePassword.NET.dll Represents the role of a 1Password user. [JsonConverter(typeof(JsonStringEnumConverterEx<UserRole>))] public enum UserRole Fields Manager = 0 Manager Member = 1 Member Unknown = 2 The user role is unknown."
  },
  "reference/OnePassword.Users.UserType.html": {
    "href": "reference/OnePassword.Users.UserType.html",
    "title": "Enum UserType | OnePassword.NET",
    "keywords": "Enum UserType Namespace OnePassword.Users Assembly OnePassword.NET.dll Represents the type of 1Password user. [JsonConverter(typeof(JsonStringEnumConverterEx<UserType>))] public enum UserType Fields Guest = 0 Guest Member = 1 Member Unknown = 2 The user type is unknown."
  },
  "reference/OnePassword.Users.VaultUser.html": {
    "href": "reference/OnePassword.Users.VaultUser.html",
    "title": "Class VaultUser | OnePassword.NET",
    "keywords": "Class VaultUser Namespace OnePassword.Users Assembly OnePassword.NET.dll Represents a 1Password user associated with a vault. public sealed class VaultUser : UserBase, IUser, IResult<IUser>, IEquatable<IResult<IUser>>, IComparable<IResult<IUser>>, IComparable Inheritance object ResultBase<IUser> UserBase VaultUser Implements IUser IResult<IUser> IEquatable<IResult<IUser>> IComparable<IResult<IUser>> IComparable Inherited Members UserBase.Email UserBase.Type UserBase.State ResultBase<IUser>.Id ResultBase<IUser>.Name ResultBase<IUser>.Deconstruct(out string, out string) ResultBase<IUser>.CompareTo(object?) ResultBase<IUser>.CompareTo(IResult<IUser>?) ResultBase<IUser>.Equals(IResult<IUser>?) ResultBase<IUser>.Equals(object?) ResultBase<IUser>.ToString() ResultBase<IUser>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Permissions The user's permissions for the vault. [JsonInclude] [JsonPropertyName(\"permissions\")] public ImmutableList<VaultPermission> Permissions { get; } Property Value ImmutableList<VaultPermission>"
  },
  "reference/OnePassword.Users.html": {
    "href": "reference/OnePassword.Users.html",
    "title": "Namespace OnePassword.Users | OnePassword.NET",
    "keywords": "Namespace OnePassword.Users Classes GroupUser Represents a 1Password user associated with group. User Represents a 1Password user. UserBase Common base class that represents a 1Password user. UserDetails Represents a 1Password user with details. VaultUser Represents a 1Password user associated with a vault. Interfaces IUser Defines a 1Password user. Enums UserRole Represents the role of a 1Password user. UserType Represents the type of 1Password user."
  },
  "reference/OnePassword.Vaults.IVault.html": {
    "href": "reference/OnePassword.Vaults.IVault.html",
    "title": "Interface IVault | OnePassword.NET",
    "keywords": "Interface IVault Namespace OnePassword.Vaults Assembly OnePassword.NET.dll Defines a 1Password vault. public interface IVault : IResult<IVault>, IEquatable<IResult<IVault>>, IComparable<IResult<IVault>>, IComparable Implements IResult<IVault> IEquatable<IResult<IVault>> IComparable<IResult<IVault>> IComparable"
  },
  "reference/OnePassword.Vaults.Vault.html": {
    "href": "reference/OnePassword.Vaults.Vault.html",
    "title": "Class Vault | OnePassword.NET",
    "keywords": "Class Vault Namespace OnePassword.Vaults Assembly OnePassword.NET.dll Represents a 1Password vault. public sealed class Vault : VaultBase, IVault, IResult<IVault>, IEquatable<IResult<IVault>>, IComparable<IResult<IVault>>, IComparable Inheritance object ResultBase<IVault> VaultBase Vault Implements IVault IResult<IVault> IEquatable<IResult<IVault>> IComparable<IResult<IVault>> IComparable Inherited Members ResultBase<IVault>.Id ResultBase<IVault>.Name ResultBase<IVault>.Deconstruct(out string, out string) ResultBase<IVault>.CompareTo(object?) ResultBase<IVault>.CompareTo(IResult<IVault>?) ResultBase<IVault>.Equals(IResult<IVault>?) ResultBase<IVault>.Equals(object?) ResultBase<IVault>.ToString() ResultBase<IVault>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "reference/OnePassword.Vaults.VaultBase.html": {
    "href": "reference/OnePassword.Vaults.VaultBase.html",
    "title": "Class VaultBase | OnePassword.NET",
    "keywords": "Class VaultBase Namespace OnePassword.Vaults Assembly OnePassword.NET.dll Common base class that represents a 1Password vault. public abstract class VaultBase : ResultBase<IVault>, IVault, IResult<IVault>, IEquatable<IResult<IVault>>, IComparable<IResult<IVault>>, IComparable Inheritance object ResultBase<IVault> VaultBase Derived Vault VaultDetails Implements IVault IResult<IVault> IEquatable<IResult<IVault>> IComparable<IResult<IVault>> IComparable Inherited Members ResultBase<IVault>.Id ResultBase<IVault>.Name ResultBase<IVault>.Deconstruct(out string, out string) ResultBase<IVault>.CompareTo(object?) ResultBase<IVault>.CompareTo(IResult<IVault>?) ResultBase<IVault>.Equals(IResult<IVault>?) ResultBase<IVault>.Equals(object?) ResultBase<IVault>.ToString() ResultBase<IVault>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "reference/OnePassword.Vaults.VaultDetails.html": {
    "href": "reference/OnePassword.Vaults.VaultDetails.html",
    "title": "Class VaultDetails | OnePassword.NET",
    "keywords": "Class VaultDetails Namespace OnePassword.Vaults Assembly OnePassword.NET.dll Represents a 1Password vault with details. public sealed class VaultDetails : VaultBase, IVault, IResult<IVault>, IEquatable<IResult<IVault>>, IComparable<IResult<IVault>>, IComparable Inheritance object ResultBase<IVault> VaultBase VaultDetails Implements IVault IResult<IVault> IEquatable<IResult<IVault>> IComparable<IResult<IVault>> IComparable Inherited Members ResultBase<IVault>.Id ResultBase<IVault>.Name ResultBase<IVault>.Deconstruct(out string, out string) ResultBase<IVault>.CompareTo(object?) ResultBase<IVault>.CompareTo(IResult<IVault>?) ResultBase<IVault>.Equals(IResult<IVault>?) ResultBase<IVault>.Equals(object?) ResultBase<IVault>.ToString() ResultBase<IVault>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Properties Created The date and time when the vault was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTimeOffset Created { get; } Property Value DateTimeOffset Items The vault items. [JsonInclude] [JsonPropertyName(\"items\")] public int Items { get; } Property Value int Type The vault type. [JsonInclude] [JsonPropertyName(\"type\")] public VaultType Type { get; } Property Value VaultType Updated The date and time when the vault was last updated. [JsonInclude] [JsonPropertyName(\"updated_at\")] public DateTimeOffset Updated { get; } Property Value DateTimeOffset"
  },
  "reference/OnePassword.Vaults.VaultIcon.html": {
    "href": "reference/OnePassword.Vaults.VaultIcon.html",
    "title": "Enum VaultIcon | OnePassword.NET",
    "keywords": "Enum VaultIcon Namespace OnePassword.Vaults Assembly OnePassword.NET.dll Represents the icon of a 1Password vault. [JsonConverter(typeof(JsonStringEnumConverterEx<VaultIcon>))] public enum VaultIcon Fields Airplane = 0 Airplane Application = 1 Application ArtSupplies = 2 Art Supplies BankersBox = 3 Bankers Box BrownBriefcase = 4 Brown Briefcase BrownGate = 5 Brown Gate Buildings = 6 Buildings Cabin = 7 Cabin Castle = 8 Castle CircleOfDots = 9 Circle of Dots Coffee = 10 Coffee ColorWheel = 11 Color Wheel CurtainedWindow = 12 Curtained Window Default = 13 The default vault icon. Document = 14 Document Doughnut = 15 Doughnut Fence = 16 Fence Galaxy = 17 Galaxy Gears = 18 Gears Globe = 19 Globe GreenBackpack = 20 Green Backpack GreenGem = 21 Green Gem Handshake = 22 Handshake HeartWithMonitor = 23 Heart with Monitor House = 24 House IdCard = 25 ID Card Jet = 26 Jet LargeShip = 27 Large Ship Luggage = 28 Luggage Plant = 29 Plant Porthole = 30 Porthole Puzzle = 31 Puzzle Rainbow = 32 Rainbow Record = 33 Record RoundDoor = 34 Round Door Sandals = 35 Sandals Scales = 36 Scales Screwdriver = 37 Screwdriver Shop = 38 Shop TallWindow = 39 Tall Window TreasureChest = 40 Treasure Chest Unknown = 43 The vault icon is unknown. VaultDoor = 41 Vault Door Vehicle = 42 Vehicle Wallet = 44 Wallet Wrench = 45 Wrench"
  },
  "reference/OnePassword.Vaults.VaultPermission.html": {
    "href": "reference/OnePassword.Vaults.VaultPermission.html",
    "title": "Enum VaultPermission | OnePassword.NET",
    "keywords": "Enum VaultPermission Namespace OnePassword.Vaults Assembly OnePassword.NET.dll Represents a 1Password vault permission. [JsonConverter(typeof(JsonStringEnumConverterEx<VaultPermission>))] public enum VaultPermission Fields AllowEditing = 0 Allow Editing AllowManaging = 1 Allow Managing AllowViewing = 2 Allow Viewing ArchiveItems = 3 Archive Items CopyAndShareItems = 4 Copy and Share Items CreateItems = 5 Create Items DeleteItems = 6 Delete Items EditItems = 7 Edit Items ExportItems = 8 Export Items ImportItems = 9 Import Items ManageVault = 10 Manage Vault PrintItems = 11 Print Items Unknown = 15 The vault permission is unknown. ViewAndCopyPasswords = 12 View and Copy Passwords ViewItemHistory = 13 View Item History ViewItems = 14 View Items"
  },
  "reference/OnePassword.Vaults.VaultType.html": {
    "href": "reference/OnePassword.Vaults.VaultType.html",
    "title": "Enum VaultType | OnePassword.NET",
    "keywords": "Enum VaultType Namespace OnePassword.Vaults Assembly OnePassword.NET.dll Represents the type of 1Password vault. [JsonConverter(typeof(JsonStringEnumConverterEx<VaultType>))] public enum VaultType Fields Personal = 0 Personal Unknown = 1 The vault type is unknown. User = 2 User Created"
  },
  "reference/OnePassword.Vaults.html": {
    "href": "reference/OnePassword.Vaults.html",
    "title": "Namespace OnePassword.Vaults | OnePassword.NET",
    "keywords": "Namespace OnePassword.Vaults Classes Vault Represents a 1Password vault. VaultBase Common base class that represents a 1Password vault. VaultDetails Represents a 1Password vault with details. Interfaces IVault Defines a 1Password vault. Enums VaultIcon Represents the icon of a 1Password vault. VaultPermission Represents a 1Password vault permission. VaultType Represents the type of 1Password vault."
  },
  "reference/OnePassword.html": {
    "href": "reference/OnePassword.html",
    "title": "Namespace OnePassword | OnePassword.NET",
    "keywords": "Namespace OnePassword Namespaces OnePassword.Accounts OnePassword.Common OnePassword.Documents OnePassword.Groups OnePassword.Items OnePassword.Templates OnePassword.Users OnePassword.Vaults Classes OnePasswordManager Represents the 1Password CLI executable manager. OnePasswordManagerOptions Represents the 1Password manager options. Interfaces IOnePasswordManager Defines a 1Password CLI executable manager. IOnePasswordManagerOptions Defines the 1Password manager options."
  }
}